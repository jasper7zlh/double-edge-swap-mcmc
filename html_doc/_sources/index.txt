.. dbl_edge_mcmc documentation master file, created by
   sphinx-quickstart on Tue Jul 19 17:46:56 2016.
   sphinx-build -b pdf source build/pdf
   
dbl_edge_mcmc documentation
===========================


.. toctree::

********
Overview
********

About
*****


For a fixed degree sequence and a given graph space, a configuration model is a uniform distribution of graphs with that degree sequence in that space. This code package implements Markov chain Monte Carlo methods to sample from configuration models, as discussed in the associated paper [1]. Given an input graph (and its implicit degree sequence), these methods can sample graphs from the configuration model on the space of (either stub or vertex-labeled): simple graphs, multigraphs or loopy multigraphs. 

For those interested in sampling loopy graphs (graphs which may have self-loops but not multiedges): While the methods in this package will perform normally if asked to sample from the space of loopy graphs, there are relatively rare degree sequences for which double edge swaps will not be able to reach every loopy graph.

If this code is utilized in work contributing to an academic publication please cite the associated paper [1].


Package Contents
****************

This package is composed of 3 small Python modules and one Jupyter notebook. The notebook **dbl_edge_worksheet.ipynb** provides a good overview of this package's content, demonstrating simple examples of how to: sample graphs with the same degree sequence; calculate statistics for different graph spaces; and use a simple test script to help verify the uniformity of the sampling. 

Please use the Jupyter notebook in conjunction with the documentation of the following modules:

1. **dbl_edge_MCMC.py**
 This stores the main methods used to sample graphs.
2. **dist_verification.py**
 Samples small graphs and plots the output to allow for visual inspection of the distribution the MCMC methods sample.
3. **sample_assortativity.py**
 Utilizes the methods in dbl_edge_MCMC to sample the assortativity of graphs drawn uniformly from a graph space. Running this as a script computes the assortativity for simple graphs with the same degree sequence as Zachary's karate club.

Taking MCMC steps
*****************

The module **dbl_edge_MCMC.py** contains the core methods used to uniformly sample graphs with 
fixed degree sequences via a double edge swap Markov chain Monte Carlo sampler. This section provides a brief overview of the different ways this module can be used. For a more detailed discussion of arguments and outputs please consult the module's documentation.

There are two primary ways to utilize this module, either though providing and
maintaining a networkx graph/multigraph object as in MCMC_class, or by providing 
and maintaining an adjacency matrix and an edge list as in the functions 
MCMC_step_stub and MCMC_step. In either approach it is necessary to specify
the desired graph space by stating whether self-loops and/or multiedges are 
allowed as well deciding whether the graph is stub- or vertex-labeled. 
 

MCMC_step and MCMC_step_stub
****************************

Functions MCMC_step_stub and MCMC_step perform a single stub-labeled and 
vertex-labeled (respectively) double edge swap and correspond to Algorithms 1 
and 3 in the accompanying paper. These functions modify a full (non-sparse) 
graph adjacency matrix, a list of edges, and a length 4 list, all in place. 
Both take the same arguments (as detailed below). Consider the following example.
    
::    
    
  import numpy as np
  A = np.array([[0,1,0],[1,2,2],[0,2,0 ]])
  edge_list = np.array([[0,1],[1,2],[1,2],[1,1]])
  swaps = [0,0,0,0]
  MCMC_step_stub(A, edge_list, swaps, loops = True, multi = True)

This performs a single MCMC step on a stub-labeled loopy multigraph, 
potentially updating A, edge_list and swap with new, post-swap values. 

Both functions return a boolean, which is true only if the Markov chain step
altered the adjacency matrix (as opposed to resampling the current graph).
If the adjacency matrix is altered the swaps argument will be changed in place,
storing the nodes that were swapped. 

MCMC_class
**********

The MCMC_class is initialized with a Networkx graph, along with the three choices
that define the graph space.  Calling the class function 'get_graph' 
advances the Markov chain and returns the current Networkx graph. Consider the following example. 

::    

  import networkx as nx
  G = nx.Graph()
  G.add_path([0,1,2,3,4])
  MC = MCMC_class(G, loops = True, multi = True, v_labeled = False)
  G2 = MC.get_graph()

This takes a path graph on 4 nodes, instantiates a MCMC_class based on this 
graph and returns a pointer to a graph G2 which differs from G by one double
edge swap. Notice that this samples from the space of stub-labeled loopy 
multigraphs, but can be easily adjusted to other spaces.    


Notes
*****

In general, directly calling MCMC_step or MCMC_step_stub is faster than 
using MCMC_class, since updating Networkx data structures doesn't benefit 
from numba acceleration.

For large graphs, the full adjacency matrix may not be able to be stored 
in memory. If so, the '@nb.jit' function decorator can be deleted and a sparse
matrix can be passed into these functions as an argument, though at a 
significant cost in speed.

We use the convention that a self-loop (u,u) contributes 2 to the diagonal of 
an adjacency matrix, not 1 as in Networkx.  

References
**********

[1] Bailey K. Fosdick, Daniel B. Larremore, Joel Nishimura, Johan Ugander. Configuring Random Graph Models with Fixed Degree Sequences (2016)

****************
dbl_edge_mcmc.py
****************

.. automodule:: dbl_edge_mcmc
    :members:
    :undoc-members:
    :inherited-members:
    :show-inheritance:



***********************
sample_assortativity.py
***********************

.. automodule:: sample_assortativity
    :members:
    :undoc-members:

********************
dist_verification.py
********************

.. automodule:: dist_verification
    :members:
    :undoc-members:


Indices 
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


