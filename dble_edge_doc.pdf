%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<< /F1 2 0 R /F2 3 0 R /F3 38 0 R /F4 40 0 R /F5 41 0 R /F6 43 0 R >>
endobj
2 0 obj
<< /BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font >>
endobj
3 0 obj
<< /BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font >>
endobj
4 0 obj
<< /Contents 95 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
5 0 obj
<< /Contents 96 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
6 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 40.01575 754.0394 192.8257 766.0394 ] /Subtype /Link /Type /Annot >>
endobj
7 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 549.6998 754.7894 555.2598 766.7894 ] /Subtype /Link /Type /Annot >>
endobj
8 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 747.0394 0 ] /Rect [ 60.01575 736.0394 101.6857 748.0394 ] /Subtype /Link /Type /Annot >>
endobj
9 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 747.0394 0 ] /Rect [ 549.6998 736.7894 555.2598 748.7894 ] /Subtype /Link /Type /Annot >>
endobj
10 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 711.8394 0 ] /Rect [ 80.01575 718.0394 106.1457 730.0394 ] /Subtype /Link /Type /Annot >>
endobj
11 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 711.8394 0 ] /Rect [ 549.6998 718.7894 555.2598 730.7894 ] /Subtype /Link /Type /Annot >>
endobj
12 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 553.0394 0 ] /Rect [ 80.01575 700.0394 161.7257 712.0394 ] /Subtype /Link /Type /Annot >>
endobj
13 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 553.0394 0 ] /Rect [ 549.6998 700.7894 555.2598 712.7894 ] /Subtype /Link /Type /Annot >>
endobj
14 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 304.2394 0 ] /Rect [ 80.01575 682.0394 170.5857 694.0394 ] /Subtype /Link /Type /Annot >>
endobj
15 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 304.2394 0 ] /Rect [ 549.6998 682.7894 555.2598 694.7894 ] /Subtype /Link /Type /Annot >>
endobj
16 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 151.4394 0 ] /Rect [ 80.01575 664.0394 237.8357 676.0394 ] /Subtype /Link /Type /Annot >>
endobj
17 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 151.4394 0 ] /Rect [ 549.6998 664.7894 555.2598 676.7894 ] /Subtype /Link /Type /Annot >>
endobj
18 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 630.2394 0 ] /Rect [ 80.01575 646.0394 139.4557 658.0394 ] /Subtype /Link /Type /Annot >>
endobj
19 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 630.2394 0 ] /Rect [ 549.6998 646.7894 555.2598 658.7894 ] /Subtype /Link /Type /Annot >>
endobj
20 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 444.6394 0 ] /Rect [ 80.01575 628.0394 106.1357 640.0394 ] /Subtype /Link /Type /Annot >>
endobj
21 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 444.6394 0 ] /Rect [ 549.6998 628.7894 555.2598 640.7894 ] /Subtype /Link /Type /Annot >>
endobj
22 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 309.8394 0 ] /Rect [ 80.01575 610.0394 131.1457 622.0394 ] /Subtype /Link /Type /Annot >>
endobj
23 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 309.8394 0 ] /Rect [ 549.6998 610.7894 555.2598 622.7894 ] /Subtype /Link /Type /Annot >>
endobj
24 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 247.0394 0 ] /Rect [ 60.01575 592.0394 146.7157 604.0394 ] /Subtype /Link /Type /Annot >>
endobj
25 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 247.0394 0 ] /Rect [ 549.6998 592.7894 555.2598 604.7894 ] /Subtype /Link /Type /Annot >>
endobj
26 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 60.01575 574.0394 163.9357 586.0394 ] /Subtype /Link /Type /Annot >>
endobj
27 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 549.6998 574.7894 555.2598 586.7894 ] /Subtype /Link /Type /Annot >>
endobj
28 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 40.01575 223.8394 0 ] /Rect [ 60.01575 556.0394 142.2657 568.0394 ] /Subtype /Link /Type /Annot >>
endobj
29 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 40.01575 223.8394 0 ] /Rect [ 549.6998 556.7894 555.2598 568.7894 ] /Subtype /Link /Type /Annot >>
endobj
30 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 50 0 R /XYZ 40.01575 321.0394 0 ] /Rect [ 40.01575 538.0394 74.47575 550.0394 ] /Subtype /Link /Type /Annot >>
endobj
31 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 50 0 R /XYZ 40.01575 321.0394 0 ] /Rect [ 549.6998 538.7894 555.2598 550.7894 ] /Subtype /Link /Type /Annot >>
endobj
32 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 70 0 R /XYZ 40.01575 799.0394 0 ] /Rect [ 40.01575 520.0394 66.13575 532.0394 ] /Subtype /Link /Type /Annot >>
endobj
33 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 70 0 R /XYZ 40.01575 799.0394 0 ] /Rect [ 549.6998 520.7894 555.2598 532.7894 ] /Subtype /Link /Type /Annot >>
endobj
34 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 75 0 R /XYZ 40.01575 799.0394 0 ] /Rect [ 40.01575 502.0394 140.5857 514.0394 ] /Subtype /Link /Type /Annot >>
endobj
35 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 75 0 R /XYZ 40.01575 799.0394 0 ] /Rect [ 549.6998 502.7894 555.2598 514.7894 ] /Subtype /Link /Type /Annot >>
endobj
36 0 obj
<< /Annots [ 6 0 R 7 0 R 8 0 R 9 0 R 10 0 R 11 0 R 12 0 R 13 0 R 14 0 R 15 0 R 
  16 0 R 17 0 R 18 0 R 19 0 R 20 0 R 21 0 R 22 0 R 23 0 R 24 0 R 25 0 R 
  26 0 R 27 0 R 28 0 R 29 0 R 30 0 R 31 0 R 32 0 R 33 0 R 34 0 R 35 0 R ] /Contents 97 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
37 0 obj
<< /Contents 98 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
38 0 obj
<< /BaseFont /Helvetica-BoldOblique /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font >>
endobj
39 0 obj
<< /Contents 99 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
40 0 obj
<< /BaseFont /Courier-Bold /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font >>
endobj
41 0 obj
<< /BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F5 /Subtype /Type1 /Type /Font >>
endobj
42 0 obj
<< /A << /S /URI /Type /Action /URI (mailto:'@nb.jit) >> /Border [ 0 0 0 ] /Rect [ 480.8446 379.8394 514.0246 391.8394 ] /Subtype /Link /Type /Annot >>
endobj
43 0 obj
<< /BaseFont /Helvetica-Oblique /Encoding /WinAnsiEncoding /Name /F6 /Subtype /Type1 /Type /Font >>
endobj
44 0 obj
<< /Annots [ 42 0 R ] /Contents 100 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
45 0 obj
<< /A << /S /URI /Type /Action /URI (mailto:'@jit) >> /Border [ 0 0 0 ] /Rect [ 159.0066 409.0394 178.2866 421.0394 ] /Subtype /Link /Type /Annot >>
endobj
46 0 obj
<< /A << /S /URI /Type /Action /URI (mailto:'@nb.jit) >> /Border [ 0 0 0 ] /Rect [ 156.0281 217.0394 189.2081 229.0394 ] /Subtype /Link /Type /Annot >>
endobj
47 0 obj
<< /Annots [ 45 0 R 46 0 R ] /Contents 101 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
48 0 obj
<< /A << /S /URI /Type /Action /URI (http://jeffe.cs.illinois.edu/compgeom/biblios.html) >> /Border [ 0 0 0 ] /Rect [ 337.9598 251.8394 549.1498 263.8394 ] /Subtype /Link /Type /Annot >>
endobj
49 0 obj
<< /Annots [ 48 0 R ] /Contents 102 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
50 0 obj
<< /Contents 103 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
51 0 obj
<< /Contents 104 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
52 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 50.01575 619.8394 0 ] /Rect [ 40.01575 726.6394 212.8357 738.6394 ] /Subtype /Link /Type /Annot >>
endobj
53 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 223.8394 0 ] /Rect [ 40.01575 678.2394 155.6057 690.2394 ] /Subtype /Link /Type /Annot >>
endobj
54 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 50.01575 86.63937 0 ] /Rect [ 40.01575 660.2394 276.1957 672.2394 ] /Subtype /Link /Type /Annot >>
endobj
55 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 40.01575 200.6394 0 ] /Rect [ 40.01575 642.2394 151.1557 654.2394 ] /Subtype /Link /Type /Annot >>
endobj
56 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 47 0 R /XYZ 50.01575 189.0394 0 ] /Rect [ 40.01575 593.8394 233.9757 605.8394 ] /Subtype /Link /Type /Annot >>
endobj
57 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 47 0 R /XYZ 60.01575 687.0394 0 ] /Rect [ 40.01575 545.4394 272.8557 557.4394 ] /Subtype /Link /Type /Annot >>
endobj
58 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 50.01575 517.8394 0 ] /Rect [ 40.01575 497.0394 264.5257 509.0394 ] /Subtype /Link /Type /Annot >>
endobj
59 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 50.01575 139.8394 0 ] /Rect [ 40.01575 448.6394 218.3757 460.6394 ] /Subtype /Link /Type /Annot >>
endobj
60 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 47 0 R /XYZ 50.01575 567.0394 0 ] /Rect [ 40.01575 430.6394 224.5057 442.6394 ] /Subtype /Link /Type /Annot >>
endobj
61 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 47 0 R /XYZ 50.01575 375.0394 0 ] /Rect [ 40.01575 412.6394 248.9657 424.6394 ] /Subtype /Link /Type /Annot >>
endobj
62 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 50 0 R /XYZ 50.01575 717.0394 0 ] /Rect [ 40.01575 364.2394 210.6157 376.2394 ] /Subtype /Link /Type /Annot >>
endobj
63 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 50.01575 475.8394 0 ] /Rect [ 40.01575 315.8394 270.6057 327.8394 ] /Subtype /Link /Type /Annot >>
endobj
64 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 40.01575 763.8394 0 ] /Rect [ 40.01575 267.4394 172.8257 279.4394 ] /Subtype /Link /Type /Annot >>
endobj
65 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 50.01575 301.8394 0 ] /Rect [ 40.01575 249.4394 277.8557 261.4394 ] /Subtype /Link /Type /Annot >>
endobj
66 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 50 0 R /XYZ 50.01575 567.0394 0 ] /Rect [ 40.01575 201.0394 232.8457 213.0394 ] /Subtype /Link /Type /Annot >>
endobj
67 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 50 0 R /XYZ 50.01575 405.0394 0 ] /Rect [ 40.01575 183.0394 281.7657 195.0394 ] /Subtype /Link /Type /Annot >>
endobj
68 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 50 0 R /XYZ 50.01575 363.0394 0 ] /Rect [ 40.01575 165.0394 252.1156 177.0394 ] /Subtype /Link /Type /Annot >>
endobj
69 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 50 0 R /XYZ 50.01575 363.0394 0 ] /Rect [ 40.01575 153.0394 112.2557 165.0394 ] /Subtype /Link /Type /Annot >>
endobj
70 0 obj
<< /Annots [ 52 0 R 53 0 R 54 0 R 55 0 R 56 0 R 57 0 R 58 0 R 59 0 R 60 0 R 61 0 R 
  62 0 R 63 0 R 64 0 R 65 0 R 66 0 R 67 0 R 68 0 R 69 0 R ] /Contents 105 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
71 0 obj
<< /Contents 106 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
72 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 250.2394 0 ] /Rect [ 40.01575 726.6394 113.3757 738.6394 ] /Subtype /Link /Type /Annot >>
endobj
73 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 40.01575 227.0394 0 ] /Rect [ 40.01575 708.6394 108.9257 720.6394 ] /Subtype /Link /Type /Annot >>
endobj
74 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 40.01575 790.2394 0 ] /Rect [ 40.01575 660.2394 130.5957 672.2394 ] /Subtype /Link /Type /Annot >>
endobj
75 0 obj
<< /Annots [ 72 0 R 73 0 R 74 0 R ] /Contents 107 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
76 0 obj
<< /Outlines 78 0 R /PageLabels 108 0 R /PageMode /UseNone /Pages 94 0 R /Type /Catalog >>
endobj
77 0 obj
<< /Author () /CreationDate <rst2pdf.createpdf.PDFDate instance at 0x00000000082FDEC8> /Creator (\(unspecified\)) /Keywords () /ModDate <rst2pdf.createpdf.PDFDate instance at 0x00000000082FDEC8> /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title () /Trapped /False >>
endobj
78 0 obj
<< /Count 17 /First 79 0 R /Last 93 0 R /Type /Outlines >>
endobj
79 0 obj
<< /Count 11 /Dest [ 39 0 R /XYZ 40.01575 787.0394 0 ] /First 80 0 R /Last 90 0 R /Next 91 0 R /Parent 78 0 R 
  /Title (dbl_edge_mcmc documentation) >>
endobj
80 0 obj
<< /Count 7 /Dest [ 39 0 R /XYZ 40.01575 747.0394 0 ] /First 81 0 R /Last 87 0 R /Next 88 0 R /Parent 79 0 R 
  /Title (Overview) >>
endobj
81 0 obj
<< /Dest [ 39 0 R /XYZ 40.01575 711.8394 0 ] /Next 82 0 R /Parent 80 0 R /Title (About) >>
endobj
82 0 obj
<< /Dest [ 39 0 R /XYZ 40.01575 553.0394 0 ] /Next 83 0 R /Parent 80 0 R /Prev 81 0 R /Title (Package Contents) >>
endobj
83 0 obj
<< /Dest [ 39 0 R /XYZ 40.01575 304.2394 0 ] /Next 84 0 R /Parent 80 0 R /Prev 82 0 R /Title (Taking MCMC steps) >>
endobj
84 0 obj
<< /Dest [ 39 0 R /XYZ 40.01575 151.4394 0 ] /Next 85 0 R /Parent 80 0 R /Prev 83 0 R /Title (MCMC_step and MCMC_step_stub) >>
endobj
85 0 obj
<< /Dest [ 44 0 R /XYZ 40.01575 630.2394 0 ] /Next 86 0 R /Parent 80 0 R /Prev 84 0 R /Title (MCMC_class) >>
endobj
86 0 obj
<< /Dest [ 44 0 R /XYZ 40.01575 444.6394 0 ] /Next 87 0 R /Parent 80 0 R /Prev 85 0 R /Title (Notes) >>
endobj
87 0 obj
<< /Dest [ 44 0 R /XYZ 40.01575 309.8394 0 ] /Parent 80 0 R /Prev 86 0 R /Title (References) >>
endobj
88 0 obj
<< /Dest [ 44 0 R /XYZ 40.01575 247.0394 0 ] /Next 89 0 R /Parent 79 0 R /Prev 80 0 R /Title (dbl_edge_mcmc.py) >>
endobj
89 0 obj
<< /Dest [ 49 0 R /XYZ 40.01575 787.0394 0 ] /Next 90 0 R /Parent 79 0 R /Prev 88 0 R /Title (sample_assortativity.py) >>
endobj
90 0 obj
<< /Dest [ 49 0 R /XYZ 40.01575 223.8394 0 ] /Parent 79 0 R /Prev 89 0 R /Title (dist_verification.py) >>
endobj
91 0 obj
<< /Dest [ 50 0 R /XYZ 40.01575 321.0394 0 ] /Next 92 0 R /Parent 78 0 R /Prev 79 0 R /Title (Indices) >>
endobj
92 0 obj
<< /Dest [ 70 0 R /XYZ 40.01575 799.0394 0 ] /Next 93 0 R /Parent 78 0 R /Prev 91 0 R /Title (Index) >>
endobj
93 0 obj
<< /Dest [ 75 0 R /XYZ 40.01575 799.0394 0 ] /Parent 78 0 R /Prev 92 0 R /Title (Python Module Index) >>
endobj
94 0 obj
<< /Count 13 /Kids [ 4 0 R 5 0 R 36 0 R 37 0 R 39 0 R 44 0 R 47 0 R 49 0 R 50 0 R 51 0 R 
  70 0 R 71 0 R 75 0 R ] /Type /Pages >>
endobj
95 0 obj
<< /Length 995 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 4 Tm /F2 20 Tf 24 TL 136.492 0 Td (dble edge documentation) Tj T* -136.492 0 Td ET
Q
Q
q
1 0 0 1 40.01575 745.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 24 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 3 Tm /F2 15 Tf 18 TL 222.6045 0 Td (version .1) Tj T* -222.6045 0 Td ET
Q
Q
q
1 0 0 1 40.01575 650 cm
Q
q
1 0 0 1 40.01575 629.6 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.4 Tm /F2 12 Tf 14.4 TL 69.55805 0 Td (Bailey Fosdick, Daniel Larremore, Joel Nishimura, Johan Ugander) Tj T* -69.55805 0 Td ET
Q
Q
q
1 0 0 1 40.01575 544.5606 cm
Q
q
1 0 0 1 40.01575 524.1606 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.4 Tm /F1 12 Tf 14.4 TL 213.924 0 Td (August 02, 2016) Tj T* -213.924 0 Td ET
Q
Q
q
1 0 0 1 40.01575 524.1606 cm
Q
q
1 0 0 1 40.01575 524.1606 cm
Q
 
endstream
endobj
96 0 obj
<< /Length 80 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 799.0394 cm
Q
 
endstream
endobj
97 0 obj
<< /Length 4084 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (Contents) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 499.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 0 255 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (dbl_edge_mcmc documentation) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 255 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 237 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Overview) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 237 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 219 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (About) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 219 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 201 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Package Contents) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 201 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 183 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Taking MCMC steps) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 183 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 165 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (MCMC_step and MCMC_step_stub) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 165 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 147 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (MCMC_class) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 147 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (2) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 129 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Notes) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 129 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (2) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 111 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (References) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 111 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (2) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 93 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dbl_edge_mcmc.py) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 93 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (2) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 75 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (sample_assortativity.py) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 75 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (4) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 57 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dist_verification.py) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 57 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (4) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 39 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (Indices) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 39 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 66.44 0 Td (5) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 21 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (Index) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 21 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 66.44 0 Td (7) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (Python Module Index) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 3 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 66.44 0 Td (9) Tj T* -66.44 0 Td ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 499.0394 cm
Q
q
1 0 0 1 40.01575 499.0394 cm
Q
 
endstream
endobj
98 0 obj
<< /Length 80 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 799.0394 cm
Q
 
endstream
endobj
99 0 obj
<< /Length 7940 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 763.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (dbl_edge_mcmc documentation) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 727.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (Overview) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 695.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (About) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 629.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .204426 Tw (For a fixed degree sequence and a given graph space, a configuration model is a uniform distribution of graphs with) Tj T* 0 Tw .556506 Tw (that degree sequence in that space. This code package implements Markov chain Monte Carlo methods to sample) Tj T* 0 Tw .916123 Tw (from configuration models, as discussed in the associated paper [1]. Given an input graph \(and its implicit degree) Tj T* 0 Tw 2.813381 Tw (sequence\), these methods can sample graphs from the configuration model on the space of \(either stub or) Tj T* 0 Tw (vertex-labeled\): simple graphs, multigraphs or loopy multigraphs.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 587.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.322131 Tw (For those interested in sampling loopy graphs \(graphs which may have self-loops but not multiedges\): While the) Tj T* 0 Tw .090215 Tw (methods in this package will perform normally if asked to sample from the space of loopy graphs, there are relatively) Tj T* 0 Tw (rare degree sequences for which double edge swaps will not be able to reach every loopy graph.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 569.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If this code is utilized in work contributing to an academic publication please cite the associated paper [1].) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 536.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Package Contents) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 482.2394 cm
q
BT 1 0 0 1 0 38 Tm 6.549578 Tw 12 TL /F1 10 Tf 0 0 0 rg (This package is composed of 3 small Python modules and one Jupyter notebook. The notebook) Tj T* 0 Tw .075341 Tw /F2 10 Tf (dbl_edge_worksheet.ipynb ) Tj /F1 10 Tf (provides a good overview of this package's content, demonstrating simple examples of) Tj T* 0 Tw 1.078476 Tw (how to: sample graphs with the same degree sequence; calculate statistics for different graph spaces; and use a) Tj T* 0 Tw (simple test script to help verify the uniformity of the sampling.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 464.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Please use the Jupyter notebook in conjunction with the documentation of the following modules:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 458.2394 cm
Q
q
1 0 0 1 40.01575 458.2394 cm
Q
q
1 0 0 1 40.01575 446.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (dbl_edge_MCMC.py) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 446.2394 cm
Q
q
1 0 0 1 40.01575 440.2394 cm
Q
q
1 0 0 1 40.01575 428.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This stores the main methods used to sample graphs.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 428.2394 cm
Q
q
1 0 0 1 40.01575 422.2394 cm
Q
q
1 0 0 1 40.01575 422.2394 cm
Q
q
1 0 0 1 40.01575 410.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (dist_verification.py) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 410.2394 cm
Q
q
1 0 0 1 40.01575 404.2394 cm
Q
q
1 0 0 1 40.01575 380.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .492594 Tw (Samples small graphs and plots the output to allow for visual inspection of the distribution the MCMC methods) Tj T* 0 Tw (sample.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 380.2394 cm
Q
q
1 0 0 1 40.01575 374.2394 cm
Q
q
1 0 0 1 40.01575 374.2394 cm
Q
q
1 0 0 1 40.01575 362.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (sample_assortativity.py) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 362.2394 cm
Q
q
1 0 0 1 40.01575 356.2394 cm
Q
q
1 0 0 1 40.01575 320.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.22694 Tw (Utilizes the methods in dbl_edge_MCMC to sample the assortativity of graphs drawn uniformly from a graph) Tj T* 0 Tw .197888 Tw (space. Running this as a script computes the assortativity for simple graphs with the same degree sequence as) Tj T* 0 Tw (Zachary's karate club.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 320.2394 cm
Q
q
1 0 0 1 40.01575 287.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Taking MCMC steps) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 233.4394 cm
q
BT 1 0 0 1 0 38 Tm 1.35315 Tw 12 TL /F1 10 Tf 0 0 0 rg (The module ) Tj /F2 10 Tf (dbl_edge_MCMC.py ) Tj /F1 10 Tf (contains the core methods used to uniformly sample graphs with fixed degree) Tj T* 0 Tw .063561 Tw (sequences via a double edge swap Markov chain Monte Carlo sampler. This section provides a brief overview of the) Tj T* 0 Tw .061339 Tw (different ways this module can be used. For a more detailed discussion of arguments and outputs please consult the) Tj T* 0 Tw (module's documentation.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 167.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 4.44894 Tw (There are two primary ways to utilize this module, either though providing and maintaining a networkx) Tj T* 0 Tw .100241 Tw (graph/multigraph object as in MCMC_class, or by providing and maintaining an adjacency matrix and an edge list as) Tj T* 0 Tw .592131 Tw (in the functions MCMC_step_stub and MCMC_step. In either approach it is necessary to specify the desired graph) Tj T* 0 Tw 1.145535 Tw (space by stating whether self-loops and/or multiedges are allowed as well deciding whether the graph is stub- or) Tj T* 0 Tw (vertex-labeled.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 134.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (MCMC_step and MCMC_step_stub) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 80.63937 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 3.230409 Tw (Functions MCMC_step_stub and MCMC_step perform a single stub-labeled and vertex-labeled \(respectively\)) Tj T* 0 Tw .524116 Tw (double edge swap and correspond to Algorithms 1 and 3 in the accompanying paper. These functions modify a full) Tj T* 0 Tw .333705 Tw (\(non-sparse\) graph adjacency matrix, a list of edges, and a length 4 list, all in place. Both take the same arguments) Tj T* 0 Tw (\(as detailed below\). Consider the following example.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dbl_edge_mcmc documentation) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
 
endstream
endobj
100 0 obj
<< /Length 14875 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 720.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 66 re B*
Q
q
.933333 1 .8 rg
n 0 48 36 12 re f*
.933333 1 .8 rg
n 42 48 30 12 re f*
.933333 1 .8 rg
n 78 48 12 12 re f*
.933333 1 .8 rg
n 96 48 12 12 re f*
.933333 1 .8 rg
n 0 36 6 12 re f*
.933333 1 .8 rg
n 12 36 6 12 re f*
.933333 1 .8 rg
n 24 36 12 12 re f*
.933333 1 .8 rg
n 36 36 6 12 re f*
.933333 1 .8 rg
n 42 36 30 12 re f*
.933333 1 .8 rg
n 72 36 18 12 re f*
.933333 1 .8 rg
n 90 36 6 12 re f*
.933333 1 .8 rg
n 96 36 6 12 re f*
.933333 1 .8 rg
n 102 36 6 12 re f*
.933333 1 .8 rg
n 108 36 6 12 re f*
.933333 1 .8 rg
n 114 36 6 12 re f*
.933333 1 .8 rg
n 120 36 18 12 re f*
.933333 1 .8 rg
n 138 36 6 12 re f*
.933333 1 .8 rg
n 144 36 6 12 re f*
.933333 1 .8 rg
n 150 36 6 12 re f*
.933333 1 .8 rg
n 156 36 6 12 re f*
.933333 1 .8 rg
n 162 36 6 12 re f*
.933333 1 .8 rg
n 168 36 18 12 re f*
.933333 1 .8 rg
n 186 36 6 12 re f*
.933333 1 .8 rg
n 192 36 6 12 re f*
.933333 1 .8 rg
n 198 36 6 12 re f*
.933333 1 .8 rg
n 204 36 6 12 re f*
.933333 1 .8 rg
n 210 36 6 12 re f*
.933333 1 .8 rg
n 222 36 18 12 re f*
.933333 1 .8 rg
n 0 24 54 12 re f*
.933333 1 .8 rg
n 60 24 6 12 re f*
.933333 1 .8 rg
n 72 24 12 12 re f*
.933333 1 .8 rg
n 84 24 6 12 re f*
.933333 1 .8 rg
n 90 24 30 12 re f*
.933333 1 .8 rg
n 120 24 18 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
.933333 1 .8 rg
n 150 24 6 12 re f*
.933333 1 .8 rg
n 156 24 18 12 re f*
.933333 1 .8 rg
n 174 24 6 12 re f*
.933333 1 .8 rg
n 180 24 6 12 re f*
.933333 1 .8 rg
n 186 24 6 12 re f*
.933333 1 .8 rg
n 192 24 18 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
.933333 1 .8 rg
n 216 24 6 12 re f*
.933333 1 .8 rg
n 222 24 6 12 re f*
.933333 1 .8 rg
n 228 24 18 12 re f*
.933333 1 .8 rg
n 246 24 6 12 re f*
.933333 1 .8 rg
n 252 24 6 12 re f*
.933333 1 .8 rg
n 258 24 6 12 re f*
.933333 1 .8 rg
n 264 24 18 12 re f*
.933333 1 .8 rg
n 0 12 30 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 0 0 84 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 108 0 54 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 174 0 30 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 216 0 30 12 re f*
.933333 1 .8 rg
n 252 0 6 12 re f*
.933333 1 .8 rg
n 264 0 24 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 300 0 30 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
.933333 1 .8 rg
n 348 0 24 12 re f*
.933333 1 .8 rg
n 372 0 6 12 re f*
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F4 10 Tf .054902 .517647 .709804 rg (numpy) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F4 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F4 10 Tf .054902 .517647 .709804 rg (np) Tj /F5 10 Tf 0 0 0 rg  T* 0 0 0 rg (A) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (array) Tj 0 0 0 rg (\([[) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (],[) Tj /F4 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (],[) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 0 0 rg (]]\)) Tj 0 0 0 rg  T* 0 0 0 rg (edge_list) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (array) Tj 0 0 0 rg (\([[) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (],[) Tj /F4 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (],[) Tj /F4 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (],[) Tj /F4 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (]]\)) Tj 0 0 0 rg  T* 0 0 0 rg (swaps) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 0 0 rg ([) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]) Tj 0 0 0 rg  T* 0 0 0 rg (MCMC_step_stub) Tj 0 0 0 rg (\() Tj 0 0 0 rg (A) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (edge_list) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (swaps) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (loops) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (True) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (multi) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (True) Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 688.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .835256 Tw (This performs a single MCMC step on a stub-labeled loopy multigraph, potentially updating A, edge_list and swap) Tj T* 0 Tw (with new, post-swap values.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 646.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .000215 Tw (Both functions return a boolean, which is true only if the Markov chain step altered the adjacency matrix \(as opposed) Tj T* 0 Tw 1.081894 Tw (to resampling the current graph\). If the adjacency matrix is altered the swaps argument will be changed in place,) Tj T* 0 Tw (storing the nodes that were swapped.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 613.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (MCMC_class) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 571.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.407888 Tw (The MCMC_class is initialized with a Networkx graph, along with the three choices that define the graph space.) Tj T* 0 Tw .413606 Tw (Calling the class function 'get_graph' advances the Markov chain and returns the current Networkx graph. Consider) Tj T* 0 Tw (the following example.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 504.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 66 re B*
Q
q
.933333 1 .8 rg
n 0 48 36 12 re f*
.933333 1 .8 rg
n 42 48 48 12 re f*
.933333 1 .8 rg
n 96 48 12 12 re f*
.933333 1 .8 rg
n 114 48 12 12 re f*
.933333 1 .8 rg
n 0 36 6 12 re f*
.933333 1 .8 rg
n 12 36 6 12 re f*
.933333 1 .8 rg
n 24 36 12 12 re f*
.933333 1 .8 rg
n 36 36 6 12 re f*
.933333 1 .8 rg
n 42 36 30 12 re f*
.933333 1 .8 rg
n 72 36 12 12 re f*
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 6 24 6 12 re f*
.933333 1 .8 rg
n 12 24 48 12 re f*
.933333 1 .8 rg
n 60 24 12 12 re f*
.933333 1 .8 rg
n 72 24 6 12 re f*
.933333 1 .8 rg
n 78 24 6 12 re f*
.933333 1 .8 rg
n 84 24 6 12 re f*
.933333 1 .8 rg
n 90 24 6 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 108 24 6 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
.933333 1 .8 rg
n 120 24 6 12 re f*
.933333 1 .8 rg
n 126 24 12 12 re f*
.933333 1 .8 rg
n 0 12 12 12 re f*
.933333 1 .8 rg
n 18 12 6 12 re f*
.933333 1 .8 rg
n 30 12 60 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 114 12 30 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 162 12 24 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 198 12 30 12 re f*
.933333 1 .8 rg
n 234 12 6 12 re f*
.933333 1 .8 rg
n 246 12 24 12 re f*
.933333 1 .8 rg
n 270 12 6 12 re f*
.933333 1 .8 rg
n 282 12 54 12 re f*
.933333 1 .8 rg
n 342 12 6 12 re f*
.933333 1 .8 rg
n 354 12 30 12 re f*
.933333 1 .8 rg
n 384 12 6 12 re f*
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 18 0 6 12 re f*
.933333 1 .8 rg
n 30 0 12 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 54 12 re f*
.933333 1 .8 rg
n 102 0 12 12 re f*
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F4 10 Tf .054902 .517647 .709804 rg (networkx) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F4 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F4 10 Tf .054902 .517647 .709804 rg (nx) Tj /F5 10 Tf 0 0 0 rg  T* 0 0 0 rg (G) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (nx) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Graph) Tj 0 0 0 rg (\(\)) Tj 0 0 0 rg  T* 0 0 0 rg (G) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (add_path) Tj 0 0 0 rg (\([) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj 0 0 0 rg  T* 0 0 0 rg (MC) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (MCMC_class) Tj 0 0 0 rg (\() Tj 0 0 0 rg (G) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (loops) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (True) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (multi) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (True) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (v_labeled) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (False) Tj 0 0 0 rg (\)) Tj 0 0 0 rg  T* 0 0 0 rg (G2) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (MC) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (get_graph) Tj 0 0 0 rg (\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 460.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.333205 Tw (This takes a path graph on 4 nodes, instantiates a MCMC_class based on this graph and returns a pointer to a) Tj T* 0 Tw .848637 Tw (graph G2 which differs from G by one double edge swap. Notice that this samples from the space of stub-labeled) Tj T* 0 Tw (loopy multigraphs, but can be easily adjusted to other spaces.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 427.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Notes) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 397.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.357238 Tw (In general, directly calling MCMC_step or MCMC_step_stub is faster than using MCMC_class, since updating) Tj T* 0 Tw (Networkx data structures doesn't benefit from numba acceleration.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 355.8394 cm
q
BT 1 0 0 1 0 26 Tm 1.525205 Tw 12 TL /F1 10 Tf 0 0 0 rg (For large graphs, the full adjacency matrix may not be able to be stored in memory. If so, the ) Tj 0 0 .501961 rg ('@nb.jit) Tj 0 0 0 rg (' function) Tj T* 0 Tw 1.54811 Tw (decorator can be deleted and a sparse matrix can be passed into these functions as an argument, though at a) Tj T* 0 Tw (significant cost in speed.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 325.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.944205 Tw (We use the convention that a self-loop \(u,u\) contributes 2 to the diagonal of an adjacency matrix, not 1 as in) Tj T* 0 Tw (Networkx.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 293.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (References) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 263.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .04094 Tw ([1] Bailey K. Fosdick, Daniel B. Larremore, Joel Nishimura, Johan Ugander. Configuring Random Graph Models with) Tj T* 0 Tw (Fixed Degree Sequences \(2016\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 227.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (dbl_edge_mcmc.py) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 209.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Created on Tue Jul 19 07:43:30 2016) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 191.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (@author: Joel Nishimura) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 161.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .425535 Tw (This module contains the core methods used to uniformly sample graphs with fixed degree sequences via a double) Tj T* 0 Tw (edge swap Markov chain Monte Carlo sampler.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 155.8394 cm
Q
q
1 0 0 1 40.01575 137.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf 0 0 0 rg (dbl_edge_mcmc.) Tj /F4 10 Tf 0 0 0 rg (MCMC_class ) Tj /F1 10 Tf 0 0 0 rg (\() Tj /F5 10 Tf 0 0 0 rg (G) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (loops) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (multi) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (v_labeled=True) Tj /F1 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 113.8394 cm
q
BT 1 0 0 1 0 14 Tm .245292 Tw 12 TL /F1 10 Tf 0 0 0 rg (MCMC_class stores the objects necessary for MCMC steps. This implementation maintains a networkx version of) Tj T* 0 Tw (the graph, though at some cost in speed.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 107.8394 cm
Q
q
1 0 0 1 50.01575 95.83937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 71.83937 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.33894 Tw (G \(networkx_class\): This graph initializes the Markov chain. All sampled graphs will have the same degree) Tj T* 0 Tw (sequence as G.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 59.83937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (loops \(bool\): True only if loops allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dbl_edge_mcmc.py) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
 
endstream
endobj
101 0 obj
<< /Length 8548 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (multi \(bool\): True only if multiedges are allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 763.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (v_labeled \(bool\): True only if the graph space is vertex-labeled. True by default.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 763.0394 cm
Q
q
1 0 0 1 50.01575 757.0394 cm
Q
q
1 0 0 1 50.01575 745.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 733.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (None) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 733.0394 cm
Q
q
1 0 0 1 50.01575 709.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.059006 Tw (MCMC_class copies the instance of the graph used to initialize it. This class supports loopy graphs, but) Tj T* 0 Tw (depending on the degree sequence, it may not be able to sample from all loopy graphs.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 703.0394 cm
Q
q
1 0 0 1 50.01575 685.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (get_graph ) Tj /F2 10 Tf 0 0 0 rg (\(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 661.0394 cm
q
BT 1 0 0 1 0 14 Tm 1.864947 Tw 12 TL /F1 10 Tf 0 0 0 rg (The Markov chains will attempt a double edge swap, after which the next graph/multigraph in the chain is) Tj T* 0 Tw (returned.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 655.0394 cm
Q
q
1 0 0 1 60.01575 643.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 631.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (None) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 631.0394 cm
Q
q
1 0 0 1 60.01575 625.0394 cm
Q
q
1 0 0 1 60.01575 613.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 601.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Markov chain's current graph.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 601.0394 cm
Q
q
1 0 0 1 60.01575 589.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Modifying the returned graph will cause errors in repeated calls of this function.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 583.0394 cm
Q
q
1 0 0 1 40.01575 565.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (dbl_edge_mcmc.) Tj /F4 10 Tf 0 0 0 rg (MCMC_step) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 553.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Performs a vertex-labeled double edge swap.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 547.0394 cm
Q
q
1 0 0 1 50.01575 535.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 523.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A \(nxn numpy array\): The adjacency matrix. Will be changed inplace.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 499.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.111705 Tw (edge_list \(nx2 numpy array\): List of edges in A. Node names should be the integers 0 to n-1. Will be changed) Tj T* 0 Tw (inplace. Edges must appear only once.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 487.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (swaps \(length 4 numpy array\): Changed inplace, will contain the four nodes swapped if a swap is accepted.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 475.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (loops \(bool\): True only if loops allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 463.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (multi \(bool\): True only if multiedges are allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 463.0394 cm
Q
q
1 0 0 1 50.01575 457.0394 cm
Q
q
1 0 0 1 50.01575 445.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 433.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (bool: True if swap is accepted, False if current graph is resampled.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 433.0394 cm
Q
q
1 0 0 1 50.01575 397.0394 cm
q
BT 1 0 0 1 0 26 Tm 1.151506 Tw 12 TL /F1 10 Tf 0 0 0 rg (This method currently requires a full adjacency matrix. Adjusting this to work a sparse adjacency matrix simply) Tj T* 0 Tw 3.170292 Tw (requires removing the ) Tj 0 0 .501961 rg ('@jit) Tj 0 0 0 rg (' decorator. This method supports loopy graphs, but depending on the degree) Tj T* 0 Tw (sequence, it may not be able to sample from all loopy graphs.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 391.0394 cm
Q
q
1 0 0 1 40.01575 373.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (dbl_edge_mcmc.) Tj /F4 10 Tf 0 0 0 rg (MCMC_step_stub) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 361.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Performs a stub-labeled double edge swap.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 355.0394 cm
Q
q
1 0 0 1 50.01575 343.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 331.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A \(nxn numpy array\): The adjacency matrix. Will be changed inplace.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 307.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.111705 Tw (edge_list \(nx2 numpy array\): List of edges in A. Node names should be the integers 0 to n-1. Will be changed) Tj T* 0 Tw (inplace. Edges must appear only once.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 295.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (swaps \(length 4 numpy array\): Changed inplace, will contain the four nodes swapped if a swap is accepted.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 283.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (loops \(bool\): True only if loops allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 271.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (multi \(bool\): True only if multiedges are allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 271.0394 cm
Q
q
1 0 0 1 50.01575 265.0394 cm
Q
q
1 0 0 1 50.01575 253.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 241.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (bool: True if swap is accepted, False if current graph is resampled.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 241.0394 cm
Q
q
1 0 0 1 50.01575 205.0394 cm
q
BT 1 0 0 1 0 26 Tm 1.151506 Tw 12 TL /F1 10 Tf 0 0 0 rg (This method currently requires a full adjacency matrix. Adjusting this to work a sparse adjacency matrix simply) Tj T* 0 Tw 2.177435 Tw (requires removing the ) Tj 0 0 .501961 rg ('@nb.jit) Tj 0 0 0 rg (' decorator. This method supports loopy graphs, but depending on the degree) Tj T* 0 Tw (sequence, it may not be able to sample from all loopy graphs.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 199.0394 cm
Q
q
1 0 0 1 40.01575 187.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (dbl_edge_mcmc.) Tj /F4 10 Tf 0 0 0 rg (flatten_graph ) Tj /F1 10 Tf 0 0 0 rg (\() Tj /F5 10 Tf 0 0 0 rg (graph) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (loops) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (multi) Tj /F1 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 175.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Takes an input graph and returns a version w/ or w/o loops and multiedges.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 169.0394 cm
Q
q
1 0 0 1 50.01575 157.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 145.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (G \(networkx_class\): The original graph.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 133.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (loops \(bool\): True only if loops are allowed in output graph.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 121.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (multi \(bool\): True only if multiedges are allowed in output graph.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 121.0394 cm
Q
q
1 0 0 1 50.01575 115.0394 cm
Q
q
1 0 0 1 50.01575 103.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 91.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A graph with or without multiedges and/or self-loops, as specified.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 91.03937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dbl_edge_mcmc.py) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
 
endstream
endobj
102 0 obj
<< /Length 8571 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 767.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (sample_assortativity.py) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 749.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Created on Tue Jul 19 10:06:33 2016) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 731.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (@author: Joel Nishimura) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 701.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .686711 Tw (This module contains functions to sample the assortativity values of graphs with the same degree sequence as an) Tj T* 0 Tw (input graph. The functions use the dbl_edge_mcmc module to perform double edge swaps.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 671.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.734358 Tw (Running this module as a script samples the assortativity of simple graphs with the same degree sequence as) Tj T* 0 Tw (Zachary's karate club at 50k different graphs spaced over 5 million double edge swaps.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 641.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.249546 Tw (Running the function 'sample_geometers' performs a more resource intensive MCMC sampling of a collaboration) Tj T* 0 Tw (network of geometers.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 635.8394 cm
Q
q
1 0 0 1 40.01575 617.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (sample_assortativity.) Tj /F4 10 Tf 0 0 0 rg (calc_r) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 605.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Calculates the assortativity r based on a network's edgelist and degrees.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 599.8394 cm
Q
q
1 0 0 1 50.01575 587.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 575.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (degree \(dict\): Keys are node names, values are degrees.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 563.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (edges \(list\): A list of the edges \(u,v\) in the graph.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 563.8394 cm
Q
q
1 0 0 1 50.01575 557.8394 cm
Q
q
1 0 0 1 50.01575 545.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 533.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\(float\) The assortativity of the graph.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 533.8394 cm
Q
q
1 0 0 1 40.01575 527.8394 cm
Q
q
1 0 0 1 40.01575 515.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (sample_assortativity.) Tj /F4 10 Tf 0 0 0 rg (load_geometers ) Tj /F1 10 Tf 0 0 0 rg (\(\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 503.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (This loads the geometers graph from file and returns a networkx multigraph.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 497.8394 cm
Q
q
1 0 0 1 40.01575 473.8394 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (sample_assortativity.) Tj /F4 10 Tf 0 0 0 rg (r_sample_MCMC ) Tj /F1 10 Tf 0 0 0 rg (\() Tj /F5 10 Tf 0 0 0 rg (G) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (loops) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (multi) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (v_uniform=True) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (its=10000) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (n_recs=100) Tj /F1 10 Tf 0 0 0 rg (,) Tj T* /F5 10 Tf 0 0 0 rg (filename='temp') Tj /F1 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 449.8394 cm
q
BT 1 0 0 1 0 14 Tm .184672 Tw 12 TL /F1 10 Tf 0 0 0 rg (Samples the graph assortativity of graphs in a specified graph space with the same degree sequence as the input) Tj T* 0 Tw (graph. Output is saved in subdirectory 'output/'.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 443.8394 cm
Q
q
1 0 0 1 50.01575 431.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 419.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (G \(networkx graph or multigraph\): Starts the MCMC at graph G. Node names be the integers 0 to n.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 407.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (loops \(bool\): True only if loops allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 395.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (multi \(bool\): True only if multiedges are allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 383.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (uniform \(bool\): True if the space is vertex labeled, False for stub-labeled.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 371.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (its \(int\): The total number of MCMC steps) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 359.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (n_recs \(int\): The number of samples from the MCMC sampler, spaced out evenly over the total number of its.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 347.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (filename \(str\): the name for the output file.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 347.8394 cm
Q
q
1 0 0 1 50.01575 341.8394 cm
Q
q
1 0 0 1 50.01575 329.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 317.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\(array\) An array recording the assortativity at n_recs number of sampled graphs.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 317.8394 cm
Q
q
1 0 0 1 40.01575 311.8394 cm
Q
q
1 0 0 1 40.01575 299.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (sample_assortativity.) Tj /F4 10 Tf 0 0 0 rg (sample_geometers ) Tj /F1 10 Tf 0 0 0 rg (\(\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 263.8394 cm
q
BT 1 0 0 1 0 26 Tm .098476 Tw 12 TL /F1 10 Tf 0 0 0 rg (This calculates the assortativity on a collaboration network of geometers, on each of the 7 possible graphs spaces) Tj T* 0 Tw .161721 Tw (which allow/disallow self-loops, multiedges, and are either stub or vertex-labeled. 10 thousand samples are drawn) Tj T* 0 Tw (over the course of 5 billion double edge swaps. Output is saved in the 'output' subdirectory with the name 'geo'.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 239.8394 cm
q
BT 1 0 0 1 0 14 Tm 3.990682 Tw 12 TL /F1 10 Tf 0 0 0 rg (References: Bill Jones. Computational geometry database \() Tj 0 0 .501961 rg (http://jeffe.cs.illinois.edu/compgeom/biblios.html) Tj 0 0 0 rg (\),) Tj T* 0 Tw (2002.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 204.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (dist_verification.py) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 186.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Created on Tue Jul 19 09:20:04 2016) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 168.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (@author: Joel Nishimura) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 150.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This module contains functions to test the uniformity of the MCMC sampling in dbl_edge_mcmc.py.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 120.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.694952 Tw (Running this as a script performs a test on the path graph with degree sequence 1,2,2,2,1. Output is saved to) Tj T* 0 Tw (subdirectory 'verification'.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 102.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A more thorough, though time-consuming test, is available in the function 'test_sampling_seven_node'.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 96.63937 cm
Q
q
1 0 0 1 40.01575 84.63937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (dist_verification.) Tj /F4 10 Tf 0 0 0 rg (determine_relative_freq ) Tj /F1 10 Tf 0 0 0 rg (\() Tj /F5 10 Tf 0 0 0 rg (G) Tj /F1 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 60.63937 cm
q
BT 1 0 0 1 0 14 Tm .000783 Tw 12 TL /F1 10 Tf 0 0 0 rg (Returns the ratio of stub-matchings for the input graph divided by the number of stub-matchings for a simple graph) Tj T* 0 Tw (with the same degree sequence.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (sample_assortativity.py) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
 
endstream
endobj
103 0 obj
<< /Length 7332 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 763.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (G \(networkx_class\): The input graph.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 763.0394 cm
Q
q
1 0 0 1 50.01575 757.0394 cm
Q
q
1 0 0 1 50.01575 745.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 733.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The likelihood of the input graph relative to a simple graph with the same degree sequence.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 733.0394 cm
Q
q
1 0 0 1 40.01575 727.0394 cm
Q
q
1 0 0 1 40.01575 715.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (dist_verification.) Tj /F4 10 Tf 0 0 0 rg (plot_vals ) Tj /F1 10 Tf 0 0 0 rg (\() Tj /F5 10 Tf 0 0 0 rg (samples) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (uniform) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (name) Tj /F1 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 691.0394 cm
q
BT 1 0 0 1 0 14 Tm 1.259163 Tw 12 TL /F1 10 Tf 0 0 0 rg (Plots the output of test_sampling as a histogram of the number of times each graph was visited in the MCMC) Tj T* 0 Tw (process. Creates a figure in subdirectory 'verification/'.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 685.0394 cm
Q
q
1 0 0 1 50.01575 673.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 649.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 8.681853 Tw (samples \(dict\): Output from test_sampling. Has a length 2 list as values corresponding to) Tj T* 0 Tw ([num_samples,sampling_weight].) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 637.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (uniform \(bool\): True if the space is vertex labeled, False for stub-labeled.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 625.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (name \(str\): Name for output.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 625.0394 cm
Q
q
1 0 0 1 50.01575 619.0394 cm
Q
q
1 0 0 1 50.01575 607.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 595.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (None) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 595.0394 cm
Q
q
1 0 0 1 40.01575 589.0394 cm
Q
q
1 0 0 1 40.01575 565.0394 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (dist_verification.) Tj /F4 10 Tf 0 0 0 rg (test_sampling ) Tj /F1 10 Tf 0 0 0 rg (\() Tj /F5 10 Tf 0 0 0 rg (G) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (self_loops=False) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (multi_edges=False) Tj /F1 10 Tf 0 0 0 rg (,) Tj T* /F5 10 Tf 0 0 0 rg (sample_uniformly=True) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (its=100000) Tj /F1 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 553.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Tests the uniformity of the MCMC sampling on an input graph.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 547.0394 cm
Q
q
1 0 0 1 50.01575 535.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 523.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (G \(networkx graph or multigraph\): The starting point of the mcmc double edges swap method.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 511.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (self_loops \(bool\): True only if loops allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 499.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (multi_edges \(bool\): True only if multiedges are allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 487.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (sample_uniformly \(bool\): True if the space is vertex labeled, False for stub-labeled.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 475.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (its \(int\): The number of samples from the MCMC sampler.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 475.0394 cm
Q
q
1 0 0 1 50.01575 469.0394 cm
Q
q
1 0 0 1 50.01575 457.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 421.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.200215 Tw (dict: Keys correspond to each visited graph, with values being a list giving the number of times the graph was) Tj T* 0 Tw 3.137435 Tw (sampled along with a weight proportional to the expected number of samplings \(relevant for stub-labeled) Tj T* 0 Tw (samplings\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 421.0394 cm
Q
q
1 0 0 1 40.01575 415.0394 cm
Q
q
1 0 0 1 40.01575 403.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (dist_verification.) Tj /F4 10 Tf 0 0 0 rg (test_sampling_five_node ) Tj /F1 10 Tf 0 0 0 rg (\(\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 379.0394 cm
q
BT 1 0 0 1 0 14 Tm 3.355881 Tw 12 TL /F1 10 Tf 0 0 0 rg (This tests the MCMC's ability to sample graphs uniformly, on degree seq. 1,2,2,2,1. Output is saved to) Tj T* 0 Tw (subdirectory verification with name beginning in 'FiveNode'.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 373.0394 cm
Q
q
1 0 0 1 40.01575 361.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (dist_verification.) Tj /F4 10 Tf 0 0 0 rg (test_sampling_seven_node ) Tj /F1 10 Tf 0 0 0 rg (\(\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 337.0394 cm
q
BT 1 0 0 1 0 14 Tm 2.313381 Tw 12 TL /F1 10 Tf 0 0 0 rg (This tests the MCMC's ability to sample graphs uniformly, on degree seq. 5,3,2,2,2,1,1. Output is saved to) Tj T* 0 Tw (subdirectory verification with name beginning in 'SevenNode'.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 297.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (Indices) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 285.0394 cm
Q
q
1 0 0 1 40.01575 285.0394 cm
Q
q
1 0 0 1 40.01575 273.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
.933333 1 .8 rg
n 0 0 48 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (genindex) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 267.0394 cm
Q
q
1 0 0 1 40.01575 255.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
.933333 1 .8 rg
n 0 0 48 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (modindex) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 249.0394 cm
Q
q
1 0 0 1 40.01575 237.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
.933333 1 .8 rg
n 0 0 36 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (search) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 237.0394 cm
Q
q
1 0 0 1 40.01575 237.0394 cm
Q
q
1 0 0 1 40.01575 237.0394 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Indices) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (5) Tj T* ET
Q
Q
 
endstream
endobj
104 0 obj
<< /Length 80 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 799.0394 cm
Q
 
endstream
endobj
105 0 obj
<< /Length 4889 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (Index) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 744.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (C) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 726.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (calc_r \(in module sample_assortativity\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 696.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (D) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 678.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dbl_edge_mcmc \(module\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 660.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (determine_relative_freq\(\) \(in module dist_verification\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 642.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dist_verification \(module\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 611.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (F) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 593.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (flatten_graph\(\) \(in module dbl_edge_mcmc\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 563.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (G) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 545.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (get_graph\(\) \(dbl_edge_mcmc.MCMC_class method\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 515.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (L) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 497.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (load_geometers\(\) \(in module sample_assortativity\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 466.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (M) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 448.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (MCMC_class \(class in dbl_edge_mcmc\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 430.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (MCMC_step \(in module dbl_edge_mcmc\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 412.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (MCMC_step_stub \(in module dbl_edge_mcmc\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 382.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (P) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 364.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (plot_vals\(\) \(in module dist_verification\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 333.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (R) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 315.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (r_sample_MCMC\(\) \(in module sample_assortativity\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 285.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (S) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 267.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (sample_assortativity \(module\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 249.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (sample_geometers\(\) \(in module sample_assortativity\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 219.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (T) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 201.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (test_sampling\(\) \(in module dist_verification\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 183.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (test_sampling_five_node\(\) \(in module dist_verification\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 153.0394 cm
q
BT 1 0 0 1 0 14 Tm 34.2498 Tw 12 TL /F1 10 Tf 0 0 .501961 rg (test_sampling_seven_node\(\) \(in module) Tj T* 0 Tw (dist_verification\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 153.0394 cm
Q
q
1 0 0 1 40.01575 153.0394 cm
Q
 
endstream
endobj
106 0 obj
<< /Length 80 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 799.0394 cm
Q
 
endstream
endobj
107 0 obj
<< /Length 1056 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (Python Module Index) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 744.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (d) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 726.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dbl_edge_mcmc) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 708.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dist_verification) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 678.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (s) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 660.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (sample_assortativity) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 660.2394 cm
Q
 
endstream
endobj
108 0 obj
<< /Nums [ 0 109 0 R 1 110 0 R 2 111 0 R 3 112 0 R 4 113 0 R 
  5 114 0 R 6 115 0 R 7 116 0 R 8 117 0 R 9 118 0 R 
  10 119 0 R 11 120 0 R 12 121 0 R ] >>
endobj
109 0 obj
<< /S /D /St 1 >>
endobj
110 0 obj
<< /S /D /St 2 >>
endobj
111 0 obj
<< /S /r /St 1 >>
endobj
112 0 obj
<< /S /r /St 2 >>
endobj
113 0 obj
<< /S /D /St 1 >>
endobj
114 0 obj
<< /S /D /St 2 >>
endobj
115 0 obj
<< /S /D /St 3 >>
endobj
116 0 obj
<< /S /D /St 4 >>
endobj
117 0 obj
<< /S /D /St 5 >>
endobj
118 0 obj
<< /S /D /St 6 >>
endobj
119 0 obj
<< /S /D /St 7 >>
endobj
120 0 obj
<< /S /D /St 8 >>
endobj
121 0 obj
<< /S /D /St 9 >>
endobj
xref
0 122
0000000000 65535 f
0000000075 00000 n
0000000163 00000 n
0000000273 00000 n
0000000388 00000 n
0000000597 00000 n
0000000806 00000 n
0000000977 00000 n
0000001148 00000 n
0000001319 00000 n
0000001490 00000 n
0000001662 00000 n
0000001834 00000 n
0000002006 00000 n
0000002178 00000 n
0000002350 00000 n
0000002522 00000 n
0000002694 00000 n
0000002866 00000 n
0000003038 00000 n
0000003210 00000 n
0000003382 00000 n
0000003554 00000 n
0000003726 00000 n
0000003898 00000 n
0000004070 00000 n
0000004242 00000 n
0000004414 00000 n
0000004586 00000 n
0000004758 00000 n
0000004930 00000 n
0000005102 00000 n
0000005274 00000 n
0000005446 00000 n
0000005618 00000 n
0000005790 00000 n
0000005962 00000 n
0000006398 00000 n
0000006608 00000 n
0000006731 00000 n
0000006941 00000 n
0000007055 00000 n
0000007164 00000 n
0000007335 00000 n
0000007454 00000 n
0000007684 00000 n
0000007852 00000 n
0000008023 00000 n
0000008260 00000 n
0000008466 00000 n
0000008696 00000 n
0000008907 00000 n
0000009118 00000 n
0000009290 00000 n
0000009462 00000 n
0000009634 00000 n
0000009806 00000 n
0000009978 00000 n
0000010150 00000 n
0000010322 00000 n
0000010494 00000 n
0000010666 00000 n
0000010838 00000 n
0000011010 00000 n
0000011182 00000 n
0000011354 00000 n
0000011526 00000 n
0000011698 00000 n
0000011870 00000 n
0000012042 00000 n
0000012214 00000 n
0000012567 00000 n
0000012778 00000 n
0000012950 00000 n
0000013122 00000 n
0000013294 00000 n
0000013538 00000 n
0000013648 00000 n
0000013976 00000 n
0000014054 00000 n
0000014227 00000 n
0000014380 00000 n
0000014490 00000 n
0000014624 00000 n
0000014759 00000 n
0000014905 00000 n
0000015033 00000 n
0000015156 00000 n
0000015271 00000 n
0000015405 00000 n
0000015546 00000 n
0000015671 00000 n
0000015796 00000 n
0000015919 00000 n
0000016043 00000 n
0000016194 00000 n
0000017245 00000 n
0000017380 00000 n
0000021521 00000 n
0000021656 00000 n
0000029653 00000 n
0000044587 00000 n
0000053193 00000 n
0000061822 00000 n
0000069212 00000 n
0000069348 00000 n
0000074295 00000 n
0000074431 00000 n
0000075545 00000 n
0000075722 00000 n
0000075760 00000 n
0000075798 00000 n
0000075836 00000 n
0000075874 00000 n
0000075912 00000 n
0000075950 00000 n
0000075988 00000 n
0000076026 00000 n
0000076064 00000 n
0000076102 00000 n
0000076140 00000 n
0000076178 00000 n
trailer
<< /ID 
 % ReportLab generated PDF document -- digest (http://www.reportlab.com)
 [(-\270/\215\023\374\232\255\017j\310\301DYu\363) (-\270/\215\023\374\232\255\017j\310\301DYu\363)]
 /Info 77 0 R /Root 76 0 R /Size 122 >>
startxref
76216
%%EOF
%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<< /F1 2 0 R /F2 3 0 R /F3 38 0 R /F4 40 0 R /F5 41 0 R /F6 43 0 R >>
endobj
2 0 obj
<< /BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font >>
endobj
3 0 obj
<< /BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font >>
endobj
4 0 obj
<< /Contents 95 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
5 0 obj
<< /Contents 96 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
6 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 40.01575 754.0394 192.8257 766.0394 ] /Subtype /Link /Type /Annot >>
endobj
7 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 549.6998 754.7894 555.2598 766.7894 ] /Subtype /Link /Type /Annot >>
endobj
8 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 747.0394 0 ] /Rect [ 60.01575 736.0394 101.6857 748.0394 ] /Subtype /Link /Type /Annot >>
endobj
9 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 747.0394 0 ] /Rect [ 549.6998 736.7894 555.2598 748.7894 ] /Subtype /Link /Type /Annot >>
endobj
10 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 711.8394 0 ] /Rect [ 80.01575 718.0394 106.1457 730.0394 ] /Subtype /Link /Type /Annot >>
endobj
11 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 711.8394 0 ] /Rect [ 549.6998 718.7894 555.2598 730.7894 ] /Subtype /Link /Type /Annot >>
endobj
12 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 553.0394 0 ] /Rect [ 80.01575 700.0394 161.7257 712.0394 ] /Subtype /Link /Type /Annot >>
endobj
13 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 553.0394 0 ] /Rect [ 549.6998 700.7894 555.2598 712.7894 ] /Subtype /Link /Type /Annot >>
endobj
14 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 304.2394 0 ] /Rect [ 80.01575 682.0394 170.5857 694.0394 ] /Subtype /Link /Type /Annot >>
endobj
15 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 304.2394 0 ] /Rect [ 549.6998 682.7894 555.2598 694.7894 ] /Subtype /Link /Type /Annot >>
endobj
16 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 151.4394 0 ] /Rect [ 80.01575 664.0394 237.8357 676.0394 ] /Subtype /Link /Type /Annot >>
endobj
17 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 39 0 R /XYZ 40.01575 151.4394 0 ] /Rect [ 549.6998 664.7894 555.2598 676.7894 ] /Subtype /Link /Type /Annot >>
endobj
18 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 630.2394 0 ] /Rect [ 80.01575 646.0394 139.4557 658.0394 ] /Subtype /Link /Type /Annot >>
endobj
19 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 630.2394 0 ] /Rect [ 549.6998 646.7894 555.2598 658.7894 ] /Subtype /Link /Type /Annot >>
endobj
20 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 444.6394 0 ] /Rect [ 80.01575 628.0394 106.1357 640.0394 ] /Subtype /Link /Type /Annot >>
endobj
21 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 444.6394 0 ] /Rect [ 549.6998 628.7894 555.2598 640.7894 ] /Subtype /Link /Type /Annot >>
endobj
22 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 309.8394 0 ] /Rect [ 80.01575 610.0394 131.1457 622.0394 ] /Subtype /Link /Type /Annot >>
endobj
23 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 309.8394 0 ] /Rect [ 549.6998 610.7894 555.2598 622.7894 ] /Subtype /Link /Type /Annot >>
endobj
24 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 247.0394 0 ] /Rect [ 60.01575 592.0394 146.7157 604.0394 ] /Subtype /Link /Type /Annot >>
endobj
25 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 247.0394 0 ] /Rect [ 549.6998 592.7894 555.2598 604.7894 ] /Subtype /Link /Type /Annot >>
endobj
26 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 47 0 R /XYZ 40.01575 75.03937 0 ] /Rect [ 60.01575 574.0394 163.9357 586.0394 ] /Subtype /Link /Type /Annot >>
endobj
27 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 47 0 R /XYZ 40.01575 75.03937 0 ] /Rect [ 549.6998 574.7894 555.2598 586.7894 ] /Subtype /Link /Type /Annot >>
endobj
28 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 40.01575 249.0394 0 ] /Rect [ 60.01575 556.0394 142.2657 568.0394 ] /Subtype /Link /Type /Annot >>
endobj
29 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 40.01575 249.0394 0 ] /Rect [ 549.6998 556.7894 555.2598 568.7894 ] /Subtype /Link /Type /Annot >>
endobj
30 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 50 0 R /XYZ 40.01575 351.0394 0 ] /Rect [ 40.01575 538.0394 74.47575 550.0394 ] /Subtype /Link /Type /Annot >>
endobj
31 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 50 0 R /XYZ 40.01575 351.0394 0 ] /Rect [ 549.6998 538.7894 555.2598 550.7894 ] /Subtype /Link /Type /Annot >>
endobj
32 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 70 0 R /XYZ 40.01575 799.0394 0 ] /Rect [ 40.01575 520.0394 66.13575 532.0394 ] /Subtype /Link /Type /Annot >>
endobj
33 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 70 0 R /XYZ 40.01575 799.0394 0 ] /Rect [ 549.6998 520.7894 555.2598 532.7894 ] /Subtype /Link /Type /Annot >>
endobj
34 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 75 0 R /XYZ 40.01575 799.0394 0 ] /Rect [ 40.01575 502.0394 140.5857 514.0394 ] /Subtype /Link /Type /Annot >>
endobj
35 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 75 0 R /XYZ 40.01575 799.0394 0 ] /Rect [ 549.6998 502.7894 555.2598 514.7894 ] /Subtype /Link /Type /Annot >>
endobj
36 0 obj
<< /Annots [ 6 0 R 7 0 R 8 0 R 9 0 R 10 0 R 11 0 R 12 0 R 13 0 R 14 0 R 15 0 R 
  16 0 R 17 0 R 18 0 R 19 0 R 20 0 R 21 0 R 22 0 R 23 0 R 24 0 R 25 0 R 
  26 0 R 27 0 R 28 0 R 29 0 R 30 0 R 31 0 R 32 0 R 33 0 R 34 0 R 35 0 R ] /Contents 97 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
37 0 obj
<< /Contents 98 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
38 0 obj
<< /BaseFont /Helvetica-BoldOblique /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font >>
endobj
39 0 obj
<< /Contents 99 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
40 0 obj
<< /BaseFont /Courier-Bold /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font >>
endobj
41 0 obj
<< /BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F5 /Subtype /Type1 /Type /Font >>
endobj
42 0 obj
<< /A << /S /URI /Type /Action /URI (mailto:'@nb.jit) >> /Border [ 0 0 0 ] /Rect [ 480.8446 379.8394 514.0246 391.8394 ] /Subtype /Link /Type /Annot >>
endobj
43 0 obj
<< /BaseFont /Helvetica-Oblique /Encoding /WinAnsiEncoding /Name /F6 /Subtype /Type1 /Type /Font >>
endobj
44 0 obj
<< /Annots [ 42 0 R ] /Contents 100 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
45 0 obj
<< /A << /S /URI /Type /Action /URI (mailto:'@jit) >> /Border [ 0 0 0 ] /Rect [ 159.0066 409.0394 178.2866 421.0394 ] /Subtype /Link /Type /Annot >>
endobj
46 0 obj
<< /A << /S /URI /Type /Action /URI (mailto:'@nb.jit) >> /Border [ 0 0 0 ] /Rect [ 156.0281 217.0394 189.2081 229.0394 ] /Subtype /Link /Type /Annot >>
endobj
47 0 obj
<< /Annots [ 45 0 R 46 0 R ] /Contents 101 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
48 0 obj
<< /A << /S /URI /Type /Action /URI (http://jeffe.cs.illinois.edu/compgeom/biblios.html) >> /Border [ 0 0 0 ] /Rect [ 337.9598 277.0394 549.1498 289.0394 ] /Subtype /Link /Type /Annot >>
endobj
49 0 obj
<< /Annots [ 48 0 R ] /Contents 102 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
50 0 obj
<< /Contents 103 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
51 0 obj
<< /Contents 104 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
52 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 50.01575 645.0394 0 ] /Rect [ 40.01575 726.6394 212.8357 738.6394 ] /Subtype /Link /Type /Annot >>
endobj
53 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 223.8394 0 ] /Rect [ 40.01575 678.2394 155.6057 690.2394 ] /Subtype /Link /Type /Annot >>
endobj
54 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 50.01575 111.8394 0 ] /Rect [ 40.01575 660.2394 276.1957 672.2394 ] /Subtype /Link /Type /Annot >>
endobj
55 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 40.01575 225.8394 0 ] /Rect [ 40.01575 642.2394 151.1557 654.2394 ] /Subtype /Link /Type /Annot >>
endobj
56 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 47 0 R /XYZ 50.01575 189.0394 0 ] /Rect [ 40.01575 593.8394 233.9757 605.8394 ] /Subtype /Link /Type /Annot >>
endobj
57 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 47 0 R /XYZ 60.01575 687.0394 0 ] /Rect [ 40.01575 545.4394 272.8557 557.4394 ] /Subtype /Link /Type /Annot >>
endobj
58 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 50.01575 543.0394 0 ] /Rect [ 40.01575 497.0394 264.5257 509.0394 ] /Subtype /Link /Type /Annot >>
endobj
59 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 50.01575 139.8394 0 ] /Rect [ 40.01575 448.6394 218.3757 460.6394 ] /Subtype /Link /Type /Annot >>
endobj
60 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 47 0 R /XYZ 50.01575 567.0394 0 ] /Rect [ 40.01575 430.6394 224.5057 442.6394 ] /Subtype /Link /Type /Annot >>
endobj
61 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 47 0 R /XYZ 50.01575 375.0394 0 ] /Rect [ 40.01575 412.6394 248.9657 424.6394 ] /Subtype /Link /Type /Annot >>
endobj
62 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 50 0 R /XYZ 50.01575 747.0394 0 ] /Rect [ 40.01575 364.2394 210.6157 376.2394 ] /Subtype /Link /Type /Annot >>
endobj
63 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 50.01575 501.0394 0 ] /Rect [ 40.01575 315.8394 270.6057 327.8394 ] /Subtype /Link /Type /Annot >>
endobj
64 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 40.01575 789.0394 0 ] /Rect [ 40.01575 267.4394 172.8257 279.4394 ] /Subtype /Link /Type /Annot >>
endobj
65 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 50.01575 327.0394 0 ] /Rect [ 40.01575 249.4394 277.8557 261.4394 ] /Subtype /Link /Type /Annot >>
endobj
66 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 50 0 R /XYZ 50.01575 597.0394 0 ] /Rect [ 40.01575 201.0394 232.8457 213.0394 ] /Subtype /Link /Type /Annot >>
endobj
67 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 50 0 R /XYZ 50.01575 435.0394 0 ] /Rect [ 40.01575 183.0394 281.7657 195.0394 ] /Subtype /Link /Type /Annot >>
endobj
68 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 50 0 R /XYZ 50.01575 393.0394 0 ] /Rect [ 40.01575 165.0394 252.1156 177.0394 ] /Subtype /Link /Type /Annot >>
endobj
69 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 50 0 R /XYZ 50.01575 393.0394 0 ] /Rect [ 40.01575 153.0394 112.2557 165.0394 ] /Subtype /Link /Type /Annot >>
endobj
70 0 obj
<< /Annots [ 52 0 R 53 0 R 54 0 R 55 0 R 56 0 R 57 0 R 58 0 R 59 0 R 60 0 R 61 0 R 
  62 0 R 63 0 R 64 0 R 65 0 R 66 0 R 67 0 R 68 0 R 69 0 R ] /Contents 105 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
71 0 obj
<< /Contents 106 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
72 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 44 0 R /XYZ 40.01575 250.2394 0 ] /Rect [ 40.01575 726.6394 113.3757 738.6394 ] /Subtype /Link /Type /Annot >>
endobj
73 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 49 0 R /XYZ 40.01575 252.2394 0 ] /Rect [ 40.01575 708.6394 108.9257 720.6394 ] /Subtype /Link /Type /Annot >>
endobj
74 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 47 0 R /XYZ 40.01575 78.23937 0 ] /Rect [ 40.01575 660.2394 130.5957 672.2394 ] /Subtype /Link /Type /Annot >>
endobj
75 0 obj
<< /Annots [ 72 0 R 73 0 R 74 0 R ] /Contents 107 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 94 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
76 0 obj
<< /Outlines 78 0 R /PageLabels 108 0 R /PageMode /UseNone /Pages 94 0 R /Type /Catalog >>
endobj
77 0 obj
<< /Author () /CreationDate <rst2pdf.createpdf.PDFDate instance at 0x00000000084243C8> /Creator (\(unspecified\)) /Keywords () /ModDate <rst2pdf.createpdf.PDFDate instance at 0x00000000084243C8> /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title () /Trapped /False >>
endobj
78 0 obj
<< /Count 17 /First 79 0 R /Last 93 0 R /Type /Outlines >>
endobj
79 0 obj
<< /Count 11 /Dest [ 39 0 R /XYZ 40.01575 787.0394 0 ] /First 80 0 R /Last 90 0 R /Next 91 0 R /Parent 78 0 R 
  /Title (dbl_edge_mcmc documentation) >>
endobj
80 0 obj
<< /Count 7 /Dest [ 39 0 R /XYZ 40.01575 747.0394 0 ] /First 81 0 R /Last 87 0 R /Next 88 0 R /Parent 79 0 R 
  /Title (Overview) >>
endobj
81 0 obj
<< /Dest [ 39 0 R /XYZ 40.01575 711.8394 0 ] /Next 82 0 R /Parent 80 0 R /Title (About) >>
endobj
82 0 obj
<< /Dest [ 39 0 R /XYZ 40.01575 553.0394 0 ] /Next 83 0 R /Parent 80 0 R /Prev 81 0 R /Title (Package Contents) >>
endobj
83 0 obj
<< /Dest [ 39 0 R /XYZ 40.01575 304.2394 0 ] /Next 84 0 R /Parent 80 0 R /Prev 82 0 R /Title (Taking MCMC steps) >>
endobj
84 0 obj
<< /Dest [ 39 0 R /XYZ 40.01575 151.4394 0 ] /Next 85 0 R /Parent 80 0 R /Prev 83 0 R /Title (MCMC_step and MCMC_step_stub) >>
endobj
85 0 obj
<< /Dest [ 44 0 R /XYZ 40.01575 630.2394 0 ] /Next 86 0 R /Parent 80 0 R /Prev 84 0 R /Title (MCMC_class) >>
endobj
86 0 obj
<< /Dest [ 44 0 R /XYZ 40.01575 444.6394 0 ] /Next 87 0 R /Parent 80 0 R /Prev 85 0 R /Title (Notes) >>
endobj
87 0 obj
<< /Dest [ 44 0 R /XYZ 40.01575 309.8394 0 ] /Parent 80 0 R /Prev 86 0 R /Title (References) >>
endobj
88 0 obj
<< /Dest [ 44 0 R /XYZ 40.01575 247.0394 0 ] /Next 89 0 R /Parent 79 0 R /Prev 80 0 R /Title (dbl_edge_mcmc.py) >>
endobj
89 0 obj
<< /Dest [ 47 0 R /XYZ 40.01575 75.03937 0 ] /Next 90 0 R /Parent 79 0 R /Prev 88 0 R /Title (sample_assortativity.py) >>
endobj
90 0 obj
<< /Dest [ 49 0 R /XYZ 40.01575 249.0394 0 ] /Parent 79 0 R /Prev 89 0 R /Title (dist_verification.py) >>
endobj
91 0 obj
<< /Dest [ 50 0 R /XYZ 40.01575 351.0394 0 ] /Next 92 0 R /Parent 78 0 R /Prev 79 0 R /Title (Indices) >>
endobj
92 0 obj
<< /Dest [ 70 0 R /XYZ 40.01575 799.0394 0 ] /Next 93 0 R /Parent 78 0 R /Prev 91 0 R /Title (Index) >>
endobj
93 0 obj
<< /Dest [ 75 0 R /XYZ 40.01575 799.0394 0 ] /Parent 78 0 R /Prev 92 0 R /Title (Python Module Index) >>
endobj
94 0 obj
<< /Count 13 /Kids [ 4 0 R 5 0 R 36 0 R 37 0 R 39 0 R 44 0 R 47 0 R 49 0 R 50 0 R 51 0 R 
  70 0 R 71 0 R 75 0 R ] /Type /Pages >>
endobj
95 0 obj
<< /Length 995 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 4 Tm /F2 20 Tf 24 TL 136.492 0 Td (dble edge documentation) Tj T* -136.492 0 Td ET
Q
Q
q
1 0 0 1 40.01575 745.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 24 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 3 Tm /F2 15 Tf 18 TL 222.6045 0 Td (version .1) Tj T* -222.6045 0 Td ET
Q
Q
q
1 0 0 1 40.01575 650 cm
Q
q
1 0 0 1 40.01575 629.6 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.4 Tm /F2 12 Tf 14.4 TL 69.55805 0 Td (Bailey Fosdick, Daniel Larremore, Joel Nishimura, Johan Ugander) Tj T* -69.55805 0 Td ET
Q
Q
q
1 0 0 1 40.01575 544.5606 cm
Q
q
1 0 0 1 40.01575 524.1606 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.4 Tm /F1 12 Tf 14.4 TL 213.924 0 Td (August 02, 2016) Tj T* -213.924 0 Td ET
Q
Q
q
1 0 0 1 40.01575 524.1606 cm
Q
q
1 0 0 1 40.01575 524.1606 cm
Q
 
endstream
endobj
96 0 obj
<< /Length 80 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 799.0394 cm
Q
 
endstream
endobj
97 0 obj
<< /Length 4084 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (Contents) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 499.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 0 255 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (dbl_edge_mcmc documentation) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 255 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 237 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Overview) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 237 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 219 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (About) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 219 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 201 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Package Contents) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 201 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 183 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Taking MCMC steps) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 183 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 165 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (MCMC_step and MCMC_step_stub) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 165 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 147 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (MCMC_class) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 147 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (2) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 129 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Notes) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 129 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (2) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 111 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (References) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 111 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (2) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 93 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dbl_edge_mcmc.py) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 93 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (2) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 75 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (sample_assortativity.py) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 75 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (3) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 57 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dist_verification.py) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 57 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (4) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 39 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (Indices) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 39 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 66.44 0 Td (5) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 21 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (Index) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 21 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 66.44 0 Td (7) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (Python Module Index) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 3 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 66.44 0 Td (9) Tj T* -66.44 0 Td ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 499.0394 cm
Q
q
1 0 0 1 40.01575 499.0394 cm
Q
 
endstream
endobj
98 0 obj
<< /Length 80 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 799.0394 cm
Q
 
endstream
endobj
99 0 obj
<< /Length 7940 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 763.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (dbl_edge_mcmc documentation) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 727.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (Overview) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 695.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (About) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 629.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .204426 Tw (For a fixed degree sequence and a given graph space, a configuration model is a uniform distribution of graphs with) Tj T* 0 Tw .556506 Tw (that degree sequence in that space. This code package implements Markov chain Monte Carlo methods to sample) Tj T* 0 Tw .916123 Tw (from configuration models, as discussed in the associated paper [1]. Given an input graph \(and its implicit degree) Tj T* 0 Tw 2.813381 Tw (sequence\), these methods can sample graphs from the configuration model on the space of \(either stub or) Tj T* 0 Tw (vertex-labeled\): simple graphs, multigraphs or loopy multigraphs.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 587.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.322131 Tw (For those interested in sampling loopy graphs \(graphs which may have self-loops but not multiedges\): While the) Tj T* 0 Tw .090215 Tw (methods in this package will perform normally if asked to sample from the space of loopy graphs, there are relatively) Tj T* 0 Tw (rare degree sequences for which double edge swaps will not be able to reach every loopy graph.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 569.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If this code is utilized in work contributing to an academic publication please cite the associated paper [1].) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 536.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Package Contents) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 482.2394 cm
q
BT 1 0 0 1 0 38 Tm 6.549578 Tw 12 TL /F1 10 Tf 0 0 0 rg (This package is composed of 3 small Python modules and one Jupyter notebook. The notebook) Tj T* 0 Tw .075341 Tw /F2 10 Tf (dbl_edge_worksheet.ipynb ) Tj /F1 10 Tf (provides a good overview of this package's content, demonstrating simple examples of) Tj T* 0 Tw 1.078476 Tw (how to: sample graphs with the same degree sequence; calculate statistics for different graph spaces; and use a) Tj T* 0 Tw (simple test script to help verify the uniformity of the sampling.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 464.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Please use the Jupyter notebook in conjunction with the documentation of the following modules:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 458.2394 cm
Q
q
1 0 0 1 40.01575 458.2394 cm
Q
q
1 0 0 1 40.01575 446.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (dbl_edge_MCMC.py) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 446.2394 cm
Q
q
1 0 0 1 40.01575 440.2394 cm
Q
q
1 0 0 1 40.01575 428.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This stores the main methods used to sample graphs.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 428.2394 cm
Q
q
1 0 0 1 40.01575 422.2394 cm
Q
q
1 0 0 1 40.01575 422.2394 cm
Q
q
1 0 0 1 40.01575 410.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (dist_verification.py) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 410.2394 cm
Q
q
1 0 0 1 40.01575 404.2394 cm
Q
q
1 0 0 1 40.01575 380.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .492594 Tw (Samples small graphs and plots the output to allow for visual inspection of the distribution the MCMC methods) Tj T* 0 Tw (sample.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 380.2394 cm
Q
q
1 0 0 1 40.01575 374.2394 cm
Q
q
1 0 0 1 40.01575 374.2394 cm
Q
q
1 0 0 1 40.01575 362.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (sample_assortativity.py) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 362.2394 cm
Q
q
1 0 0 1 40.01575 356.2394 cm
Q
q
1 0 0 1 40.01575 320.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.22694 Tw (Utilizes the methods in dbl_edge_MCMC to sample the assortativity of graphs drawn uniformly from a graph) Tj T* 0 Tw .197888 Tw (space. Running this as a script computes the assortativity for simple graphs with the same degree sequence as) Tj T* 0 Tw (Zachary's karate club.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 320.2394 cm
Q
q
1 0 0 1 40.01575 287.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Taking MCMC steps) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 233.4394 cm
q
BT 1 0 0 1 0 38 Tm 1.35315 Tw 12 TL /F1 10 Tf 0 0 0 rg (The module ) Tj /F2 10 Tf (dbl_edge_MCMC.py ) Tj /F1 10 Tf (contains the core methods used to uniformly sample graphs with fixed degree) Tj T* 0 Tw .063561 Tw (sequences via a double edge swap Markov chain Monte Carlo sampler. This section provides a brief overview of the) Tj T* 0 Tw .061339 Tw (different ways this module can be used. For a more detailed discussion of arguments and outputs please consult the) Tj T* 0 Tw (module's documentation.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 167.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 4.44894 Tw (There are two primary ways to utilize this module, either though providing and maintaining a networkx) Tj T* 0 Tw .100241 Tw (graph/multigraph object as in MCMC_class, or by providing and maintaining an adjacency matrix and an edge list as) Tj T* 0 Tw .592131 Tw (in the functions MCMC_step_stub and MCMC_step. In either approach it is necessary to specify the desired graph) Tj T* 0 Tw 1.145535 Tw (space by stating whether self-loops and/or multiedges are allowed as well deciding whether the graph is stub- or) Tj T* 0 Tw (vertex-labeled.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 134.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (MCMC_step and MCMC_step_stub) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 80.63937 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 3.230409 Tw (Functions MCMC_step_stub and MCMC_step perform a single stub-labeled and vertex-labeled \(respectively\)) Tj T* 0 Tw .524116 Tw (double edge swap and correspond to Algorithms 1 and 3 in the accompanying paper. These functions modify a full) Tj T* 0 Tw .333705 Tw (\(non-sparse\) graph adjacency matrix, a list of edges, and a length 4 list, all in place. Both take the same arguments) Tj T* 0 Tw (\(as detailed below\). Consider the following example.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dbl_edge_mcmc documentation) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
 
endstream
endobj
100 0 obj
<< /Length 14875 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 720.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 66 re B*
Q
q
.933333 1 .8 rg
n 0 48 36 12 re f*
.933333 1 .8 rg
n 42 48 30 12 re f*
.933333 1 .8 rg
n 78 48 12 12 re f*
.933333 1 .8 rg
n 96 48 12 12 re f*
.933333 1 .8 rg
n 0 36 6 12 re f*
.933333 1 .8 rg
n 12 36 6 12 re f*
.933333 1 .8 rg
n 24 36 12 12 re f*
.933333 1 .8 rg
n 36 36 6 12 re f*
.933333 1 .8 rg
n 42 36 30 12 re f*
.933333 1 .8 rg
n 72 36 18 12 re f*
.933333 1 .8 rg
n 90 36 6 12 re f*
.933333 1 .8 rg
n 96 36 6 12 re f*
.933333 1 .8 rg
n 102 36 6 12 re f*
.933333 1 .8 rg
n 108 36 6 12 re f*
.933333 1 .8 rg
n 114 36 6 12 re f*
.933333 1 .8 rg
n 120 36 18 12 re f*
.933333 1 .8 rg
n 138 36 6 12 re f*
.933333 1 .8 rg
n 144 36 6 12 re f*
.933333 1 .8 rg
n 150 36 6 12 re f*
.933333 1 .8 rg
n 156 36 6 12 re f*
.933333 1 .8 rg
n 162 36 6 12 re f*
.933333 1 .8 rg
n 168 36 18 12 re f*
.933333 1 .8 rg
n 186 36 6 12 re f*
.933333 1 .8 rg
n 192 36 6 12 re f*
.933333 1 .8 rg
n 198 36 6 12 re f*
.933333 1 .8 rg
n 204 36 6 12 re f*
.933333 1 .8 rg
n 210 36 6 12 re f*
.933333 1 .8 rg
n 222 36 18 12 re f*
.933333 1 .8 rg
n 0 24 54 12 re f*
.933333 1 .8 rg
n 60 24 6 12 re f*
.933333 1 .8 rg
n 72 24 12 12 re f*
.933333 1 .8 rg
n 84 24 6 12 re f*
.933333 1 .8 rg
n 90 24 30 12 re f*
.933333 1 .8 rg
n 120 24 18 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
.933333 1 .8 rg
n 150 24 6 12 re f*
.933333 1 .8 rg
n 156 24 18 12 re f*
.933333 1 .8 rg
n 174 24 6 12 re f*
.933333 1 .8 rg
n 180 24 6 12 re f*
.933333 1 .8 rg
n 186 24 6 12 re f*
.933333 1 .8 rg
n 192 24 18 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
.933333 1 .8 rg
n 216 24 6 12 re f*
.933333 1 .8 rg
n 222 24 6 12 re f*
.933333 1 .8 rg
n 228 24 18 12 re f*
.933333 1 .8 rg
n 246 24 6 12 re f*
.933333 1 .8 rg
n 252 24 6 12 re f*
.933333 1 .8 rg
n 258 24 6 12 re f*
.933333 1 .8 rg
n 264 24 18 12 re f*
.933333 1 .8 rg
n 0 12 30 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 0 0 84 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 108 0 54 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 174 0 30 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 216 0 30 12 re f*
.933333 1 .8 rg
n 252 0 6 12 re f*
.933333 1 .8 rg
n 264 0 24 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 300 0 30 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
.933333 1 .8 rg
n 348 0 24 12 re f*
.933333 1 .8 rg
n 372 0 6 12 re f*
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F4 10 Tf .054902 .517647 .709804 rg (numpy) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F4 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F4 10 Tf .054902 .517647 .709804 rg (np) Tj /F5 10 Tf 0 0 0 rg  T* 0 0 0 rg (A) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (array) Tj 0 0 0 rg (\([[) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (],[) Tj /F4 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (],[) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 0 0 rg (]]\)) Tj 0 0 0 rg  T* 0 0 0 rg (edge_list) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (array) Tj 0 0 0 rg (\([[) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (],[) Tj /F4 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (],[) Tj /F4 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (],[) Tj /F4 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (]]\)) Tj 0 0 0 rg  T* 0 0 0 rg (swaps) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 0 0 rg ([) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]) Tj 0 0 0 rg  T* 0 0 0 rg (MCMC_step_stub) Tj 0 0 0 rg (\() Tj 0 0 0 rg (A) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (edge_list) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (swaps) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (loops) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (True) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (multi) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (True) Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 688.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .835256 Tw (This performs a single MCMC step on a stub-labeled loopy multigraph, potentially updating A, edge_list and swap) Tj T* 0 Tw (with new, post-swap values.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 646.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .000215 Tw (Both functions return a boolean, which is true only if the Markov chain step altered the adjacency matrix \(as opposed) Tj T* 0 Tw 1.081894 Tw (to resampling the current graph\). If the adjacency matrix is altered the swaps argument will be changed in place,) Tj T* 0 Tw (storing the nodes that were swapped.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 613.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (MCMC_class) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 571.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.407888 Tw (The MCMC_class is initialized with a Networkx graph, along with the three choices that define the graph space.) Tj T* 0 Tw .413606 Tw (Calling the class function 'get_graph' advances the Markov chain and returns the current Networkx graph. Consider) Tj T* 0 Tw (the following example.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 504.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 66 re B*
Q
q
.933333 1 .8 rg
n 0 48 36 12 re f*
.933333 1 .8 rg
n 42 48 48 12 re f*
.933333 1 .8 rg
n 96 48 12 12 re f*
.933333 1 .8 rg
n 114 48 12 12 re f*
.933333 1 .8 rg
n 0 36 6 12 re f*
.933333 1 .8 rg
n 12 36 6 12 re f*
.933333 1 .8 rg
n 24 36 12 12 re f*
.933333 1 .8 rg
n 36 36 6 12 re f*
.933333 1 .8 rg
n 42 36 30 12 re f*
.933333 1 .8 rg
n 72 36 12 12 re f*
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 6 24 6 12 re f*
.933333 1 .8 rg
n 12 24 48 12 re f*
.933333 1 .8 rg
n 60 24 12 12 re f*
.933333 1 .8 rg
n 72 24 6 12 re f*
.933333 1 .8 rg
n 78 24 6 12 re f*
.933333 1 .8 rg
n 84 24 6 12 re f*
.933333 1 .8 rg
n 90 24 6 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 108 24 6 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
.933333 1 .8 rg
n 120 24 6 12 re f*
.933333 1 .8 rg
n 126 24 12 12 re f*
.933333 1 .8 rg
n 0 12 12 12 re f*
.933333 1 .8 rg
n 18 12 6 12 re f*
.933333 1 .8 rg
n 30 12 60 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 114 12 30 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 162 12 24 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 198 12 30 12 re f*
.933333 1 .8 rg
n 234 12 6 12 re f*
.933333 1 .8 rg
n 246 12 24 12 re f*
.933333 1 .8 rg
n 270 12 6 12 re f*
.933333 1 .8 rg
n 282 12 54 12 re f*
.933333 1 .8 rg
n 342 12 6 12 re f*
.933333 1 .8 rg
n 354 12 30 12 re f*
.933333 1 .8 rg
n 384 12 6 12 re f*
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 18 0 6 12 re f*
.933333 1 .8 rg
n 30 0 12 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 54 12 re f*
.933333 1 .8 rg
n 102 0 12 12 re f*
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F4 10 Tf .054902 .517647 .709804 rg (networkx) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F4 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F4 10 Tf .054902 .517647 .709804 rg (nx) Tj /F5 10 Tf 0 0 0 rg  T* 0 0 0 rg (G) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (nx) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Graph) Tj 0 0 0 rg (\(\)) Tj 0 0 0 rg  T* 0 0 0 rg (G) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (add_path) Tj 0 0 0 rg (\([) Tj /F4 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F4 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj 0 0 0 rg  T* 0 0 0 rg (MC) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (MCMC_class) Tj 0 0 0 rg (\() Tj 0 0 0 rg (G) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (loops) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (True) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (multi) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (True) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (v_labeled) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (False) Tj 0 0 0 rg (\)) Tj 0 0 0 rg  T* 0 0 0 rg (G2) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (MC) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (get_graph) Tj 0 0 0 rg (\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 460.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.333205 Tw (This takes a path graph on 4 nodes, instantiates a MCMC_class based on this graph and returns a pointer to a) Tj T* 0 Tw .848637 Tw (graph G2 which differs from G by one double edge swap. Notice that this samples from the space of stub-labeled) Tj T* 0 Tw (loopy multigraphs, but can be easily adjusted to other spaces.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 427.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Notes) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 397.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.357238 Tw (In general, directly calling MCMC_step or MCMC_step_stub is faster than using MCMC_class, since updating) Tj T* 0 Tw (Networkx data structures doesn't benefit from numba acceleration.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 355.8394 cm
q
BT 1 0 0 1 0 26 Tm 1.525205 Tw 12 TL /F1 10 Tf 0 0 0 rg (For large graphs, the full adjacency matrix may not be able to be stored in memory. If so, the ) Tj 0 0 .501961 rg ('@nb.jit) Tj 0 0 0 rg (' function) Tj T* 0 Tw 1.54811 Tw (decorator can be deleted and a sparse matrix can be passed into these functions as an argument, though at a) Tj T* 0 Tw (significant cost in speed.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 325.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.944205 Tw (We use the convention that a self-loop \(u,u\) contributes 2 to the diagonal of an adjacency matrix, not 1 as in) Tj T* 0 Tw (Networkx.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 293.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (References) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 263.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .04094 Tw ([1] Bailey K. Fosdick, Daniel B. Larremore, Joel Nishimura, Johan Ugander. Configuring Random Graph Models with) Tj T* 0 Tw (Fixed Degree Sequences \(2016\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 227.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (dbl_edge_mcmc.py) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 209.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Created on Tue Jul 19 07:43:30 2016) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 191.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (@author: Joel Nishimura) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 161.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .425535 Tw (This module contains the core methods used to uniformly sample graphs with fixed degree sequences via a double) Tj T* 0 Tw (edge swap Markov chain Monte Carlo sampler.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 155.8394 cm
Q
q
1 0 0 1 40.01575 137.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf 0 0 0 rg (dbl_edge_mcmc.) Tj /F4 10 Tf 0 0 0 rg (MCMC_class ) Tj /F1 10 Tf 0 0 0 rg (\() Tj /F5 10 Tf 0 0 0 rg (G) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (loops) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (multi) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (v_labeled=True) Tj /F1 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 113.8394 cm
q
BT 1 0 0 1 0 14 Tm .245292 Tw 12 TL /F1 10 Tf 0 0 0 rg (MCMC_class stores the objects necessary for MCMC steps. This implementation maintains a networkx version of) Tj T* 0 Tw (the graph, though at some cost in speed.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 107.8394 cm
Q
q
1 0 0 1 50.01575 95.83937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 71.83937 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.33894 Tw (G \(networkx_class\): This graph initializes the Markov chain. All sampled graphs will have the same degree) Tj T* 0 Tw (sequence as G.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 59.83937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (loops \(bool\): True only if loops allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dbl_edge_mcmc.py) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
 
endstream
endobj
101 0 obj
<< /Length 8776 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (multi \(bool\): True only if multiedges are allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 763.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (v_labeled \(bool\): True only if the graph space is vertex-labeled. True by default.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 763.0394 cm
Q
q
1 0 0 1 50.01575 757.0394 cm
Q
q
1 0 0 1 50.01575 745.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 733.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (None) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 733.0394 cm
Q
q
1 0 0 1 50.01575 709.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.059006 Tw (MCMC_class copies the instance of the graph used to initialize it. This class supports loopy graphs, but) Tj T* 0 Tw (depending on the degree sequence, it may not be able to sample from all loopy graphs.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 703.0394 cm
Q
q
1 0 0 1 50.01575 685.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (get_graph ) Tj /F2 10 Tf 0 0 0 rg (\(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 661.0394 cm
q
BT 1 0 0 1 0 14 Tm 1.864947 Tw 12 TL /F1 10 Tf 0 0 0 rg (The Markov chains will attempt a double edge swap, after which the next graph/multigraph in the chain is) Tj T* 0 Tw (returned.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 655.0394 cm
Q
q
1 0 0 1 60.01575 643.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 631.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (None) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 631.0394 cm
Q
q
1 0 0 1 60.01575 625.0394 cm
Q
q
1 0 0 1 60.01575 613.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 601.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Markov chain's current graph.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 601.0394 cm
Q
q
1 0 0 1 60.01575 589.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Modifying the returned graph will cause errors in repeated calls of this function.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 583.0394 cm
Q
q
1 0 0 1 40.01575 565.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (dbl_edge_mcmc.) Tj /F4 10 Tf 0 0 0 rg (MCMC_step) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 553.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Performs a vertex-labeled double edge swap.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 547.0394 cm
Q
q
1 0 0 1 50.01575 535.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 523.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A \(nxn numpy array\): The adjacency matrix. Will be changed inplace.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 499.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.111705 Tw (edge_list \(nx2 numpy array\): List of edges in A. Node names should be the integers 0 to n-1. Will be changed) Tj T* 0 Tw (inplace. Edges must appear only once.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 487.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (swaps \(length 4 numpy array\): Changed inplace, will contain the four nodes swapped if a swap is accepted.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 475.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (loops \(bool\): True only if loops allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 463.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (multi \(bool\): True only if multiedges are allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 463.0394 cm
Q
q
1 0 0 1 50.01575 457.0394 cm
Q
q
1 0 0 1 50.01575 445.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 433.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (bool: True if swap is accepted, False if current graph is resampled.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 433.0394 cm
Q
q
1 0 0 1 50.01575 397.0394 cm
q
BT 1 0 0 1 0 26 Tm 1.151506 Tw 12 TL /F1 10 Tf 0 0 0 rg (This method currently requires a full adjacency matrix. Adjusting this to work a sparse adjacency matrix simply) Tj T* 0 Tw 3.170292 Tw (requires removing the ) Tj 0 0 .501961 rg ('@jit) Tj 0 0 0 rg (' decorator. This method supports loopy graphs, but depending on the degree) Tj T* 0 Tw (sequence, it may not be able to sample from all loopy graphs.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 391.0394 cm
Q
q
1 0 0 1 40.01575 373.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (dbl_edge_mcmc.) Tj /F4 10 Tf 0 0 0 rg (MCMC_step_stub) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 361.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Performs a stub-labeled double edge swap.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 355.0394 cm
Q
q
1 0 0 1 50.01575 343.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 331.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A \(nxn numpy array\): The adjacency matrix. Will be changed inplace.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 307.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.111705 Tw (edge_list \(nx2 numpy array\): List of edges in A. Node names should be the integers 0 to n-1. Will be changed) Tj T* 0 Tw (inplace. Edges must appear only once.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 295.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (swaps \(length 4 numpy array\): Changed inplace, will contain the four nodes swapped if a swap is accepted.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 283.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (loops \(bool\): True only if loops allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 271.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (multi \(bool\): True only if multiedges are allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 271.0394 cm
Q
q
1 0 0 1 50.01575 265.0394 cm
Q
q
1 0 0 1 50.01575 253.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 241.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (bool: True if swap is accepted, False if current graph is resampled.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 241.0394 cm
Q
q
1 0 0 1 50.01575 205.0394 cm
q
BT 1 0 0 1 0 26 Tm 1.151506 Tw 12 TL /F1 10 Tf 0 0 0 rg (This method currently requires a full adjacency matrix. Adjusting this to work a sparse adjacency matrix simply) Tj T* 0 Tw 2.177435 Tw (requires removing the ) Tj 0 0 .501961 rg ('@nb.jit) Tj 0 0 0 rg (' decorator. This method supports loopy graphs, but depending on the degree) Tj T* 0 Tw (sequence, it may not be able to sample from all loopy graphs.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 199.0394 cm
Q
q
1 0 0 1 40.01575 187.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (dbl_edge_mcmc.) Tj /F4 10 Tf 0 0 0 rg (flatten_graph ) Tj /F1 10 Tf 0 0 0 rg (\() Tj /F5 10 Tf 0 0 0 rg (graph) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (loops) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (multi) Tj /F1 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 175.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Takes an input graph and returns a version w/ or w/o loops and multiedges.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 169.0394 cm
Q
q
1 0 0 1 50.01575 157.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 145.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (G \(networkx_class\): The original graph.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 133.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (loops \(bool\): True only if loops are allowed in output graph.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 121.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (multi \(bool\): True only if multiedges are allowed in output graph.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 121.0394 cm
Q
q
1 0 0 1 50.01575 115.0394 cm
Q
q
1 0 0 1 50.01575 103.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 91.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A graph with or without multiedges and/or self-loops, as specified.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 91.03937 cm
Q
q
1 0 0 1 40.01575 55.83937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (sample_assortativity.py) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (sample_assortativity.py) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
 
endstream
endobj
102 0 obj
<< /Length 8660 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Created on Tue Jul 19 10:06:33 2016) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 757.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (@author: Joel Nishimura) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 727.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .686711 Tw (This module contains functions to sample the assortativity values of graphs with the same degree sequence as an) Tj T* 0 Tw (input graph. The functions use the dbl_edge_mcmc module to perform double edge swaps.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 697.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.734358 Tw (Running this module as a script samples the assortativity of simple graphs with the same degree sequence as) Tj T* 0 Tw (Zachary's karate club at 50k different graphs spaced over 5 million double edge swaps.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 667.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.249546 Tw (Running the function 'sample_geometers' performs a more resource intensive MCMC sampling of a collaboration) Tj T* 0 Tw (network of geometers.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 661.0394 cm
Q
q
1 0 0 1 40.01575 643.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (sample_assortativity.) Tj /F4 10 Tf 0 0 0 rg (calc_r) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 631.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Calculates the assortativity r based on a network's edgelist and degrees.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 625.0394 cm
Q
q
1 0 0 1 50.01575 613.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 601.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (degree \(dict\): Keys are node names, values are degrees.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 589.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (edges \(list\): A list of the edges \(u,v\) in the graph.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 589.0394 cm
Q
q
1 0 0 1 50.01575 583.0394 cm
Q
q
1 0 0 1 50.01575 571.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 559.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\(float\) The assortativity of the graph.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 559.0394 cm
Q
q
1 0 0 1 40.01575 553.0394 cm
Q
q
1 0 0 1 40.01575 541.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (sample_assortativity.) Tj /F4 10 Tf 0 0 0 rg (load_geometers ) Tj /F1 10 Tf 0 0 0 rg (\(\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 529.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (This loads the geometers graph from file and returns a networkx multigraph.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 523.0394 cm
Q
q
1 0 0 1 40.01575 499.0394 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (sample_assortativity.) Tj /F4 10 Tf 0 0 0 rg (r_sample_MCMC ) Tj /F1 10 Tf 0 0 0 rg (\() Tj /F5 10 Tf 0 0 0 rg (G) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (loops) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (multi) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (v_uniform=True) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (its=10000) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (n_recs=100) Tj /F1 10 Tf 0 0 0 rg (,) Tj T* /F5 10 Tf 0 0 0 rg (filename='temp') Tj /F1 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 475.0394 cm
q
BT 1 0 0 1 0 14 Tm .184672 Tw 12 TL /F1 10 Tf 0 0 0 rg (Samples the graph assortativity of graphs in a specified graph space with the same degree sequence as the input) Tj T* 0 Tw (graph. Output is saved in subdirectory 'output/'.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 469.0394 cm
Q
q
1 0 0 1 50.01575 457.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 445.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (G \(networkx graph or multigraph\): Starts the MCMC at graph G. Node names be the integers 0 to n.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 433.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (loops \(bool\): True only if loops allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 421.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (multi \(bool\): True only if multiedges are allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 409.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (uniform \(bool\): True if the space is vertex labeled, False for stub-labeled.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 397.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (its \(int\): The total number of MCMC steps) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 385.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (n_recs \(int\): The number of samples from the MCMC sampler, spaced out evenly over the total number of its.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 373.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (filename \(str\): the name for the output file.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 373.0394 cm
Q
q
1 0 0 1 50.01575 367.0394 cm
Q
q
1 0 0 1 50.01575 355.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 343.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\(array\) An array recording the assortativity at n_recs number of sampled graphs.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 343.0394 cm
Q
q
1 0 0 1 40.01575 337.0394 cm
Q
q
1 0 0 1 40.01575 325.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (sample_assortativity.) Tj /F4 10 Tf 0 0 0 rg (sample_geometers ) Tj /F1 10 Tf 0 0 0 rg (\(\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 289.0394 cm
q
BT 1 0 0 1 0 26 Tm .098476 Tw 12 TL /F1 10 Tf 0 0 0 rg (This calculates the assortativity on a collaboration network of geometers, on each of the 7 possible graphs spaces) Tj T* 0 Tw .161721 Tw (which allow/disallow self-loops, multiedges, and are either stub or vertex-labeled. 10 thousand samples are drawn) Tj T* 0 Tw (over the course of 5 billion double edge swaps. Output is saved in the 'output' subdirectory with the name 'geo'.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 265.0394 cm
q
BT 1 0 0 1 0 14 Tm 3.990682 Tw 12 TL /F1 10 Tf 0 0 0 rg (References: Bill Jones. Computational geometry database \() Tj 0 0 .501961 rg (http://jeffe.cs.illinois.edu/compgeom/biblios.html) Tj 0 0 0 rg (\),) Tj T* 0 Tw (2002.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 229.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (dist_verification.py) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 211.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Created on Tue Jul 19 09:20:04 2016) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 193.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (@author: Joel Nishimura) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 175.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This module contains functions to test the uniformity of the MCMC sampling in dbl_edge_mcmc.py.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 145.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.694952 Tw (Running this as a script performs a test on the path graph with degree sequence 1,2,2,2,1. Output is saved to) Tj T* 0 Tw (subdirectory 'verification'.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 127.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A more thorough, though time-consuming test, is available in the function 'test_sampling_seven_node'.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 121.8394 cm
Q
q
1 0 0 1 40.01575 109.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (dist_verification.) Tj /F4 10 Tf 0 0 0 rg (determine_relative_freq ) Tj /F1 10 Tf 0 0 0 rg (\() Tj /F5 10 Tf 0 0 0 rg (G) Tj /F1 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 85.83937 cm
q
BT 1 0 0 1 0 14 Tm .000783 Tw 12 TL /F1 10 Tf 0 0 0 rg (Returns the ratio of stub-matchings for the input graph divided by the number of stub-matchings for a simple graph) Tj T* 0 Tw (with the same degree sequence.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 80.05039 cm
Q
q
1 0 0 1 50.01575 68.05039 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 56.05039 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (G \(networkx_class\): The input graph.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 56.05039 cm
Q
q
1 0 0 1 50.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dist_verification.py) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
 
endstream
endobj
103 0 obj
<< /Length 7019 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 763.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The likelihood of the input graph relative to a simple graph with the same degree sequence.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 763.0394 cm
Q
q
1 0 0 1 40.01575 757.0394 cm
Q
q
1 0 0 1 40.01575 745.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (dist_verification.) Tj /F4 10 Tf 0 0 0 rg (plot_vals ) Tj /F1 10 Tf 0 0 0 rg (\() Tj /F5 10 Tf 0 0 0 rg (samples) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (uniform) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (name) Tj /F1 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 721.0394 cm
q
BT 1 0 0 1 0 14 Tm 1.259163 Tw 12 TL /F1 10 Tf 0 0 0 rg (Plots the output of test_sampling as a histogram of the number of times each graph was visited in the MCMC) Tj T* 0 Tw (process. Creates a figure in subdirectory 'verification/'.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 715.0394 cm
Q
q
1 0 0 1 50.01575 703.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 679.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 8.681853 Tw (samples \(dict\): Output from test_sampling. Has a length 2 list as values corresponding to) Tj T* 0 Tw ([num_samples,sampling_weight].) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 667.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (uniform \(bool\): True if the space is vertex labeled, False for stub-labeled.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 655.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (name \(str\): Name for output.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 655.0394 cm
Q
q
1 0 0 1 50.01575 649.0394 cm
Q
q
1 0 0 1 50.01575 637.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 625.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (None) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 625.0394 cm
Q
q
1 0 0 1 40.01575 619.0394 cm
Q
q
1 0 0 1 40.01575 595.0394 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (dist_verification.) Tj /F4 10 Tf 0 0 0 rg (test_sampling ) Tj /F1 10 Tf 0 0 0 rg (\() Tj /F5 10 Tf 0 0 0 rg (G) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (self_loops=False) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (multi_edges=False) Tj /F1 10 Tf 0 0 0 rg (,) Tj T* /F5 10 Tf 0 0 0 rg (sample_uniformly=True) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F5 10 Tf 0 0 0 rg (its=100000) Tj /F1 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 583.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Tests the uniformity of the MCMC sampling on an input graph.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 577.0394 cm
Q
q
1 0 0 1 50.01575 565.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Args:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 553.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (G \(networkx graph or multigraph\): The starting point of the mcmc double edges swap method.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 541.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (self_loops \(bool\): True only if loops allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 529.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (multi_edges \(bool\): True only if multiedges are allowed in the graph space.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 517.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (sample_uniformly \(bool\): True if the space is vertex labeled, False for stub-labeled.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 505.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (its \(int\): The number of samples from the MCMC sampler.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 505.0394 cm
Q
q
1 0 0 1 50.01575 499.0394 cm
Q
q
1 0 0 1 50.01575 487.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Returns:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 451.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.200215 Tw (dict: Keys correspond to each visited graph, with values being a list giving the number of times the graph was) Tj T* 0 Tw 3.137435 Tw (sampled along with a weight proportional to the expected number of samplings \(relevant for stub-labeled) Tj T* 0 Tw (samplings\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 451.0394 cm
Q
q
1 0 0 1 40.01575 445.0394 cm
Q
q
1 0 0 1 40.01575 433.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (dist_verification.) Tj /F4 10 Tf 0 0 0 rg (test_sampling_five_node ) Tj /F1 10 Tf 0 0 0 rg (\(\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 409.0394 cm
q
BT 1 0 0 1 0 14 Tm 3.355881 Tw 12 TL /F1 10 Tf 0 0 0 rg (This tests the MCMC's ability to sample graphs uniformly, on degree seq. 1,2,2,2,1. Output is saved to) Tj T* 0 Tw (subdirectory verification with name beginning in 'FiveNode'.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 403.0394 cm
Q
q
1 0 0 1 40.01575 391.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (dist_verification.) Tj /F4 10 Tf 0 0 0 rg (test_sampling_seven_node ) Tj /F1 10 Tf 0 0 0 rg (\(\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 367.0394 cm
q
BT 1 0 0 1 0 14 Tm 2.313381 Tw 12 TL /F1 10 Tf 0 0 0 rg (This tests the MCMC's ability to sample graphs uniformly, on degree seq. 5,3,2,2,2,1,1. Output is saved to) Tj T* 0 Tw (subdirectory verification with name beginning in 'SevenNode'.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 327.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (Indices) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 315.0394 cm
Q
q
1 0 0 1 40.01575 315.0394 cm
Q
q
1 0 0 1 40.01575 303.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
.933333 1 .8 rg
n 0 0 48 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (genindex) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 297.0394 cm
Q
q
1 0 0 1 40.01575 285.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
.933333 1 .8 rg
n 0 0 48 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (modindex) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 279.0394 cm
Q
q
1 0 0 1 40.01575 267.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
.933333 1 .8 rg
n 0 0 36 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (search) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 267.0394 cm
Q
q
1 0 0 1 40.01575 267.0394 cm
Q
q
1 0 0 1 40.01575 267.0394 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Indices) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (5) Tj T* ET
Q
Q
 
endstream
endobj
104 0 obj
<< /Length 80 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 799.0394 cm
Q
 
endstream
endobj
105 0 obj
<< /Length 4889 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (Index) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 744.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (C) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 726.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (calc_r \(in module sample_assortativity\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 696.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (D) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 678.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dbl_edge_mcmc \(module\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 660.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (determine_relative_freq\(\) \(in module dist_verification\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 642.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dist_verification \(module\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 611.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (F) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 593.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (flatten_graph\(\) \(in module dbl_edge_mcmc\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 563.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (G) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 545.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (get_graph\(\) \(dbl_edge_mcmc.MCMC_class method\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 515.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (L) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 497.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (load_geometers\(\) \(in module sample_assortativity\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 466.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (M) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 448.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (MCMC_class \(class in dbl_edge_mcmc\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 430.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (MCMC_step \(in module dbl_edge_mcmc\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 412.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (MCMC_step_stub \(in module dbl_edge_mcmc\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 382.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (P) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 364.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (plot_vals\(\) \(in module dist_verification\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 333.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (R) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 315.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (r_sample_MCMC\(\) \(in module sample_assortativity\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 285.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (S) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 267.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (sample_assortativity \(module\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 249.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (sample_geometers\(\) \(in module sample_assortativity\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 219.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (T) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 201.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (test_sampling\(\) \(in module dist_verification\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 183.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (test_sampling_five_node\(\) \(in module dist_verification\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 153.0394 cm
q
BT 1 0 0 1 0 14 Tm 34.2498 Tw 12 TL /F1 10 Tf 0 0 .501961 rg (test_sampling_seven_node\(\) \(in module) Tj T* 0 Tw (dist_verification\)) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 153.0394 cm
Q
q
1 0 0 1 40.01575 153.0394 cm
Q
 
endstream
endobj
106 0 obj
<< /Length 80 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 799.0394 cm
Q
 
endstream
endobj
107 0 obj
<< /Length 1056 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (Python Module Index) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 744.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (d) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 726.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dbl_edge_mcmc) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 708.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dist_verification) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 678.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (s) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 660.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (sample_assortativity) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 660.2394 cm
Q
 
endstream
endobj
108 0 obj
<< /Nums [ 0 109 0 R 1 110 0 R 2 111 0 R 3 112 0 R 4 113 0 R 
  5 114 0 R 6 115 0 R 7 116 0 R 8 117 0 R 9 118 0 R 
  10 119 0 R 11 120 0 R 12 121 0 R ] >>
endobj
109 0 obj
<< /S /D /St 1 >>
endobj
110 0 obj
<< /S /D /St 2 >>
endobj
111 0 obj
<< /S /r /St 1 >>
endobj
112 0 obj
<< /S /r /St 2 >>
endobj
113 0 obj
<< /S /D /St 1 >>
endobj
114 0 obj
<< /S /D /St 2 >>
endobj
115 0 obj
<< /S /D /St 3 >>
endobj
116 0 obj
<< /S /D /St 4 >>
endobj
117 0 obj
<< /S /D /St 5 >>
endobj
118 0 obj
<< /S /D /St 6 >>
endobj
119 0 obj
<< /S /D /St 7 >>
endobj
120 0 obj
<< /S /D /St 8 >>
endobj
121 0 obj
<< /S /D /St 9 >>
endobj
xref
0 122
0000000000 65535 f
0000000075 00000 n
0000000163 00000 n
0000000273 00000 n
0000000388 00000 n
0000000597 00000 n
0000000806 00000 n
0000000977 00000 n
0000001148 00000 n
0000001319 00000 n
0000001490 00000 n
0000001662 00000 n
0000001834 00000 n
0000002006 00000 n
0000002178 00000 n
0000002350 00000 n
0000002522 00000 n
0000002694 00000 n
0000002866 00000 n
0000003038 00000 n
0000003210 00000 n
0000003382 00000 n
0000003554 00000 n
0000003726 00000 n
0000003898 00000 n
0000004070 00000 n
0000004242 00000 n
0000004414 00000 n
0000004586 00000 n
0000004758 00000 n
0000004930 00000 n
0000005102 00000 n
0000005274 00000 n
0000005446 00000 n
0000005618 00000 n
0000005790 00000 n
0000005962 00000 n
0000006398 00000 n
0000006608 00000 n
0000006731 00000 n
0000006941 00000 n
0000007055 00000 n
0000007164 00000 n
0000007335 00000 n
0000007454 00000 n
0000007684 00000 n
0000007852 00000 n
0000008023 00000 n
0000008260 00000 n
0000008466 00000 n
0000008696 00000 n
0000008907 00000 n
0000009118 00000 n
0000009290 00000 n
0000009462 00000 n
0000009634 00000 n
0000009806 00000 n
0000009978 00000 n
0000010150 00000 n
0000010322 00000 n
0000010494 00000 n
0000010666 00000 n
0000010838 00000 n
0000011010 00000 n
0000011182 00000 n
0000011354 00000 n
0000011526 00000 n
0000011698 00000 n
0000011870 00000 n
0000012042 00000 n
0000012214 00000 n
0000012567 00000 n
0000012778 00000 n
0000012950 00000 n
0000013122 00000 n
0000013294 00000 n
0000013538 00000 n
0000013648 00000 n
0000013976 00000 n
0000014054 00000 n
0000014227 00000 n
0000014380 00000 n
0000014490 00000 n
0000014624 00000 n
0000014759 00000 n
0000014905 00000 n
0000015033 00000 n
0000015156 00000 n
0000015271 00000 n
0000015405 00000 n
0000015546 00000 n
0000015671 00000 n
0000015796 00000 n
0000015919 00000 n
0000016043 00000 n
0000016194 00000 n
0000017245 00000 n
0000017380 00000 n
0000021521 00000 n
0000021656 00000 n
0000029653 00000 n
0000044587 00000 n
0000053421 00000 n
0000062139 00000 n
0000069216 00000 n
0000069352 00000 n
0000074299 00000 n
0000074435 00000 n
0000075549 00000 n
0000075726 00000 n
0000075764 00000 n
0000075802 00000 n
0000075840 00000 n
0000075878 00000 n
0000075916 00000 n
0000075954 00000 n
0000075992 00000 n
0000076030 00000 n
0000076068 00000 n
0000076106 00000 n
0000076144 00000 n
0000076182 00000 n
trailer
<< /ID 
 % ReportLab generated PDF document -- digest (http://www.reportlab.com)
 [(-\270/\215\023\374\232\255\017j\310\301DYu\363) (-\270/\215\023\374\232\255\017j\310\301DYu\363)]
 /Info 77 0 R /Root 76 0 R /Size 122 >>
startxref
76220
%%EOF
